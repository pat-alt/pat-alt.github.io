{
  "hash": "22a8bb4fc671acf5b6833148bb12845c",
  "result": {
    "markdown": "---\ntitle: A Leap of Faith into Julia's Metaverse\nsubtitle: Getting started with metaprogramming in Julia\ndate: '2022-03-13'\ncategories:\n  - metaprogramming\n  - macros\n  - Julia\ndescription: 'In this slightly different post, I talk about my first experience with metaprogramming in Julia.'\nimage: www/intro.gif\ndraft: true\n---\n\n\n\n<div class=\"intro-gif\">\n  <figure>\n    <img src=\"www/intro.gif\">\n    <figcaption>Conformal Prediction intervals for different<br>coverage rates. As coverage grows, so does<br>the width of the prediction interval.</figcaption>\n  </figure>\n</div>\n\nOn this blog, I typically talk about things that I have **some** understanding of. In this post, I want to try something a little different and instead cover a topic that I am utterly **clueless** about. There's an interesting aspect about Julia, which I know embarrassingly little about at this point: [Metaprogramming](https://docs.julialang.org/en/v1.8/manual/metaprogramming/). \n\nHaving worked with Julia almost every day for about 1.5 years now, I have employed a successful strategy of occasionally taking a glimpse at that part of the Julia documentation and then deciding to go back to pretending it doesn't exist. Meanwhile, [Karandeep Singh](https://twitter.com/kdpsinghlab) has stepped onto the Julia stage around 5 minutes ago and already developed a package that literally oozes Metaprogramming: [Tidier.jl](https://kdpsingh.github.io/Tidier.jl/dev/). The package API is such a joy to work with, that I have felt inspired to finally take a serious look at what Metaprogramming is all about. \n\nMy goal is to get to the point where I can confidently write my first macro for [`CounterfactualExplanations.jl`](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl) - more on this below! If you are as clueless and curious about the topic as yours truly, then follow along on a journey into the metaverse. Buckle in though, it's going to be a bumpy ride! You have been warned. \n\n## All right, where to start?\n\nYou guessed it, we'll start with the official Julia [documentation](https://docs.julialang.org/en/v1.8/manual/metaprogramming/) on the topic:\n\n> Like Lisp, Julia represents its own code as a data structure of the language itself.\n\nHmmm ... I know nothing about Lisp and this is already beyond me. Code as a data structure?\n\nLet's first try to understand what exactly metaprogramming even is, outside of Julia and Lisp. We'll take a quick detour before we're back. \n\n[Wikipedia](https://en.wikipedia.org/wiki/Metaprogramming#:~:text=Metaprogramming%20is%20a%20programming%20technique,even%20modify%20itself%20while%20running.) has the following to say on the topic:\n\n> Metaprogramming is a programming technique in which computer programs have the ability to treat other programs as their data.\n\nOk, ChatGPT? I wanted to try out [ReplGPT](https://github.com/ThatcherC/ReplGPT.jl) anyway so here goes:\n\n```{.julia-repl}\njulia> using ReplGPT\nChatGPT> Hey hey, can you please explain metaprogramming to me (I have no computer science background, but am experienced with programming and data science)\n  Metaprogramming is a programming technique where a program is capable of creating or manipulating code at\n  runtime. It involves writing computer programs that create, modify, or analyze other computer programs or data\n  about those programs.\n```\n\nAlright, so in layman's terms metaprogramming involves code that generates code - I guess we really have entered the metaverse!\n\n## Julia docs (v1.8)\n\nLet's head back to the Julia [documentation](https://docs.julialang.org/en/v1.8/manual/metaprogramming/) and look at the first couple of examples.\n\n### Code as Data Structures\n\nSkipping the details here, it turns out that when I write `1 + 1` in the REPL, Julia first parses this program as a string `\"1 + 1` into an expression `ex=:(1 + 1)::Expr`, which is then evaluated `eval(ex)`. I've used a `quote` here to generate the expression because I've used **quoting** before for use with `Documenter.jl`. \n\nAnd if I understand this correctly, the expression `ex::Expr` is literally **code as a data structure**:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nex = :(sum([1,2,3]))\ndump(ex)\n```\n:::\n\n\n![Key concept: code as a data structure.](www/code-as-data.png)\n\nThat data structure can be \"manipulated from within the language\". Let's try that! Currently, evaluating this expression yields the `sum` of the `Array`:\n\n::: {.cell execution_count=3}\n``` {.julia .cell-code}\neval(ex)\n```\n:::\n\n\nUpon manipulation (that sounds weird!), we have:\n\n::: {.cell execution_count=4}\n``` {.julia .cell-code}\nex.args[1] = :maximum\neval(ex)\n```\n:::\n\n\nOk ok, things are starting to make sense! \n\n### Interpolation\n\nBack to the Julia documentation and next on the agenda we [Interpolation](https://docs.julialang.org/en/v1.8/manual/metaprogramming/#man-expression-interpolation). Skipping the details again, it seems like I can interpolate expression much like strings. Using interpolation I can recreate the expression from above as follows:\n\n::: {.cell execution_count=5}\n``` {.julia .cell-code}\nfun = maximum\nx = [1,2,3]\nex_from_ex_interpoliation = :($fun($x))\na = eval(ex_from_ex_interpoliation)\n```\n:::\n\n\nUsing string interpolation is quite similar:\n\n::: {.cell execution_count=6}\n``` {.julia .cell-code}\nfun = maximum\nx = [1,2,3]\nex_from_string_interpolation = Meta.parse(\"$fun($x)\")\neval(ex_from_string_interpolation) == a\n```\n:::\n\n\nAnd much like with function arguments, we can also use splatting:\n\n::: {.cell execution_count=7}\n``` {.julia .cell-code}\neval(:(zeros($x...)))\n```\n:::\n\n\nNext off, we have [**nested quotes**](https://docs.julialang.org/en/v1.8/manual/metaprogramming/#Nested-quote). I can't see myself using these anytime soon but anyway it seems that for each `$` sign that we prepend to `x`, an evaluation is trigged: \n\n::: {.cell execution_count=8}\n``` {.julia .cell-code}\neval(quote quote $$:(x) end end)\n```\n:::\n\n\nMoving on, we have [`QuoteNodes`](https://docs.julialang.org/en/v1.8/manual/metaprogramming/#man-quote-node), which I will skip because I probably won't be doing any advanced metaprogramming anytime soon. The next two sections on [evaluating expressions](https://docs.julialang.org/en/v1.8/manual/metaprogramming/#Evaluating-expressions) and [functions on `Expr`essions](https://docs.julialang.org/en/v1.8/manual/metaprogramming/#Functions-on-Expressions) also look somewhat more involved than what I need right now, but I expect I'll find myself back here when I write that first macro for [`CounterfactualExplanations.jl`](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl).\n\n### Macros \n\n![Arrived in Macroland.](www/macroland.png){fig-align=\"right\"}\n\nAhhh, I see we've finally arrived in [Macroland](https://docs.julialang.org/en/v1.8/manual/metaprogramming/#man-macros)! \n\n> A macro maps a tuple of arguments to a returned expression, and the resulting expression is compiled directly rather than requiring a runtime eval call.\n\nLet's see if we can make sense of this as we move on. The `Hello, world!` example makes it quite clear:\n\n::: {.cell execution_count=9}\n``` {.julia .cell-code}\nmacro sayhello(name)\n    return :( println(\"Hello, \", $name) )   # return the expression ...\nend\n@sayhello \"reader\"                          # ... to be immediately compiled.\n```\n:::\n\n\nSo I understand that a macro is a way to build and return expressions inside a block (a bit like a function) but on call that expression is immediately evaluated. In other words, we can use macros to write code that generates code that is then evaluated. \n\nTo fully grasp the next [part](https://docs.julialang.org/en/v1.8/manual/metaprogramming/#Hold-up:-why-macros?), I should have not skipped the part on [functions on `Expr`essions](https://docs.julialang.org/en/v1.8/manual/metaprogramming/#Functions-on-Expressions). We'll leave that little nugget for Future Me. That same guy will also have to suffer the consequences of Present Me merely skimming the details in the next [section](https://docs.julialang.org/en/v1.8/manual/metaprogramming/#Macro-invocation) on macro invocation. Present Me is impatient and overly confident in the level of knowledge that we have just acquired about metaprogramming. Let's meet the final boss of the metaverse and ...\n\n## ðŸ”¥ðŸ”¥ðŸ”¥ BUILD AN ADVANCED MACRO\n\nOk, great, let's go! I'll leave it to you to read that section in the Julia [docs](https://docs.julialang.org/en/v1.8/manual/metaprogramming/#Building-an-advanced-macro). We'll jump straight into building the macro I want to build for [`CounterfactualExplanations.jl`](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl). I now think it'll be less involved than I thought --- optimism in the face of uncertainty!\n\n![Advanced Macro: the final boss.](www/final-boss.png){fig-align=\"right\"}\n\n### From Off-the-Shelf Counterfactual Generators ...\n\n[`CounterfactualExplanations.jl`](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl) is a package for generating Counterfactual Explanations for predictive models $f: \\mathcal{X} \\mapsto \\mathcal{Y}$. This is a relatively recent approach to Explainable AI that I am (probably a little too) excited about and won't dwell on here. For what follows, it's worth mentioning that generating Counterfactual Explanations can be seen as a generative modelling task because it involves generating samples in the input space: $x \\sim \\mathcal{X}$. To this end, the package ships with a number of `Generators`, which are really just composite types that contain information about how counterfactuals ought to be generated. \n\nCurrently, users can specify the type of generator they want to use by instantiating it. For example, the DiCE generator by @mothilal2020explaining can be instantiated as follows:\n\n::: {.cell execution_count=10}\n``` {.julia .cell-code}\ngenerator = DiCEGenerator()\n```\n:::\n\n\nThis is a straightforward way for users to use off-the-shelf counterfactual generators. But there is some untapped potential here, as we will see next.\n\n### ... To Composable Generators\n\nOne of my key objectives for the package has always been composability. It turns out that many of the various counterfactual generators that have been proposed in the literature, essentially do the same thing: they optimize an objective function. In @altmeyer2023endogenous, we denote that objective formally as follows,\n\n$$\n\\begin{aligned}\n\\mathbf{s}^\\prime &= \\arg \\min_{\\mathbf{s}^\\prime \\in \\mathcal{S}} \\left\\{  {\\text{yloss}(M(f(\\mathbf{s}^\\prime)),y^*)}+ \\lambda {\\text{cost}(f(\\mathbf{s}^\\prime)) }  \\right\\} \n\\end{aligned} \n$$ {#eq-general}\n\nwhere $\\text{yloss}$ denotes the main loss function and $\\text{cost}$ is a penalty term. I won't cover this in any more detail here, but you can read more about it in the package [docs](https://juliatrustworthyai.github.io/CounterfactualExplanations.jl/v0.1/explanation/generators/overview/#Gradient-based-Counterfactual-Generators). The important thing to mention here is that @eq-general very closely describes how counterfactual search is actually implemented in the package. \n\nIn other words, all generators currently implemented work with that same objective. They just vary in the way that penalties are defined, for example. This gives rise to an interesting idea: \n\n> Why not compose generators that combine ideas from different off-the-shelf generators?\n\nI want to give users an easy way to do that, without having to build custom `Generator`s from scratch. This (I think) is a good use case for metaprogramming.\n\nLet's try and see if we can make that work. We'll simply extend `CounterfactualExplanations` right here in this repo hosting the blog (easily done in Julia) and provided everything works out well create a pull request. I already have a GitHub [issue](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl/issues/118) for this with a linked branch, so that's the one I'll use in my environment:\n\n```{.julia}\n(metaprogramming) pkg> add https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl#118-add-losses-and-penalties-modules-or-group-under-objectives-module\njulia> using CounterfactualExplanations\n```\n\nBy the time you're reading this, all changes to that branch will hopefully already be committed and merged.\n\nLet's start by instantiating a generic generator:\n\n::: {.cell execution_count=11}\n``` {.julia .cell-code}\ngenerator = GenericGenerator()\n```\n:::\n\n\nOur goal is to create macros that build expressions that, when evaluated, mutate the `generator` instance. \n\n### Define your `@objective`\n\nOur first and most important macro shall define the counterfactual search objective. In particular, the `@objective` macro should accept an expression that looks much like the right-hand-side of @eq-general, which is essentially just a weighted sum. \n\n![Sketch of the envisioned `@objective` macro.](www/objective.png)\n\nLet's start with that part. Naively, we could begin by writing it out very literally:\n\n```{.julia}\nex = :(yloss + Î»*cost)\neval(ex)\n```\n\nOf course, evaluating this expression throws an error because none of the variables are actually defined. Let's work on that ...\n\nFor the loss and penalty functions, we will use methods available from the `CounterfactualExplanations.Objectives` module, while for $\\lambda$ we will use a literal:\n\n::: {.cell execution_count=12}\n``` {.julia .cell-code}\nex = :(logitbinarycrossentropy + 0.1 * distance_l2)\n```\n:::\n\n\nLet's try to make sense of the data structure we have created:\n\n::: {.cell execution_count=13}\n``` {.julia .cell-code}\nex.args\n```\n:::\n\n\nMy first naive approach ...\n\n```{.julia}\nmacro objective(generator, ex)\n    loss = ex.args[2]\n    ex_penalty = ex.args[3]\n    Î» = ex_penalty.args[2]\n    cost = ex_penalty.args[3]\n    ex_generator = quote \n        $generator.loss = $loss\n        $generator.cost = $cost\n        $generator.Î» = $Î»\n    end\n    return ex_generator\nend\n@objective(generator, logitbinarycrossentropy + 0.1 * distance_l2)\n```\n\nThis still throws an error because ...\n\n::: {.cell execution_count=14}\n``` {.julia .cell-code}\nmacro objective(generator, ex)\n    loss = getfield(CounterfactualExplanations.Objectives, ex.args[2])\n    ex_penalty = ex.args[3]\n    Î» = ex_penalty.args[2]\n    cost = getfield(CounterfactualExplanations.Objectives, ex_penalty.args[3])\n    ex_generator = quote \n        $generator.loss = $loss\n        $generator.penalty = $cost\n        $generator.Î» = $Î»\n        generator\n    end\n    return ex_generator\nend\n@objective(generator, logitbinarycrossentropy + 0.1 * distance_l2)\n```\n:::\n\n\nFinally, this works!\n\nBut what about adding multiple penalties? The DiCE generator, for example, also takes into account how diverse the counterfactual explanations are [@mothilal2020explaining]. The corresponding penalty is called `ddp_diversity`. Let's start with the expression again:\n\n::: {.cell execution_count=15}\n``` {.julia .cell-code}\nex = :(logitbinarycrossentropy + 0.1 * distance_l2 + 1.0 * ddp_diversity)\nex.args\n```\n:::\n\n\n::: {.cell execution_count=16}\n``` {.julia .cell-code}\nMarkdown.parse(\n    \"\"\"\n    This time there's a second nested `Expr`ession among the arguments: `:($(ex.args[end]))`.\n    \"\"\"\n)\n```\n:::\n\n\n::: {.cell execution_count=17}\n``` {.julia .cell-code}\nmacro objective(generator, ex)\n    loss = getfield(CounterfactualExplanations.Objectives, ex.args[2])\n    Î› = Vector{AbstractFloat}()\n    costs = Vector{Function}()\n    for i in 3:length(ex.args)\n        ex_penalty = ex.args[i]\n        Î» = ex_penalty.args[2]\n        push!(Î›, Î»)\n        cost = getfield(CounterfactualExplanations.Objectives, ex_penalty.args[3])\n        push!(costs, cost)\n    end\n    ex_generator = quote \n        $generator.loss = $loss\n        $generator.penalty = $costs\n        $generator.Î» = $Î›\n        generator\n    end\n    return ex_generator\nend\n@objective(generator, logitbinarycrossentropy + 0.2distance_l2 + 1.0ddp_diversity)\n```\n:::\n\n\nOk, shall we see if that's worked? Below we go through some of the typical workflows associated with Counterfactual Explanations. Firstly, we load some synthetic data and fit a black-box model to it.\n\n::: {.cell execution_count=18}\n``` {.julia .cell-code}\nn_dim = 2\nn_classes = 4\nn_samples = 400\nmodel_name = :MLP\ncounterfactual_data = CounterfactualExplanations.load_blobs(n_samples; k=n_dim, centers=n_classes)\nM = fit_model(counterfactual_data, model_name)\nplot(M, counterfactual_data)\n```\n:::\n\n\nNext, we begin by specifying our target and factual label. We then draw a random sample from the non-target (factual) class.\n\n::: {.cell execution_count=19}\n``` {.julia .cell-code}\n# Factual and target:\ntarget = 2\nfactual = 4\nchosen = rand(findall(predict_label(M, counterfactual_data) .== factual))\nx = select_factual(counterfactual_data,chosen)\n```\n:::\n\n\nFinally, we use our `generator` to generate counterfactuals:\n\n::: {.cell execution_count=20}\n``` {.julia .cell-code}\nce = generate_counterfactual(\n    x, target, counterfactual_data, M, generator;\n    num_counterfactuals = 5\n)\n```\n:::\n\n\nIt worked! ðŸŽ‰ The resulting counterfactual search is illustrated in @fig-search. \n\n::: {#fig-search .cell execution_count=21}\n``` {.julia .cell-code}\nplot(ce)\n```\n:::\n\n\nTime for me to add this all to [`CounterfactualExplanations.jl`](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl). But not before quickly wrapping things up ...\n\n## Wrapping Up\n\n\n\n## References\n\n",
    "supporting": [
      "index_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}