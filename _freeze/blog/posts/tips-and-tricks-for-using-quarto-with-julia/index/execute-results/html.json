{
  "hash": "d4b8753f65e2ef20a937065ef143a036",
  "result": {
    "markdown": "---\ntitle: \"A year of using Quarto with Julia\"\nsubtitle: \"Tips and tricks for Julia practitioners\"\ndate: '2022-11-21'\ndescription: |\n    A short companion post to my presentation on using Quarto with Julia at the 2nd JuliaLang Eindhoven meetup in November, 2022.\ncategories:\n  - Quarto\n  - Julia\n  - open-source\n  - reproducibility\nimage: /www/images/julia_quarto.gif\ndraft: false\n---\n\n<div class=\"intro-gif\">\n  <figure>\n    <img src=\"/www/images/julia_quarto.gif\">\n    <figcaption>A year of using Quarto with Julia.</figcaption>\n  </figure>\n</div>\n\nEarlier this year in July, I gave a short Experience Talk at [JuliaCon](https://pretalx.com/juliacon-2022/speaker/8DGYCX/). In a related blog [post](../julia-and-quarto-a-match-made-in-heaven/index.qmd) I explained how the introduction of Quarto made my transition from R to Julia painless: I would be able to start learning Julia without having to give up on all the benefits associated with R Markdown. \n\nIn November, 2022, I am presenting on this topic again at the [2nd JuliaLang Eindhoven meetup](https://www.linkedin.com/feed/update/urn:li:activity:6995656928957718528?updateEntityUrn=urn%3Ali%3Afs_feedUpdate%3A%28V2%2Curn%3Ali%3Aactivity%3A6995656928957718528%29). In addition to the [slides](../../../content/talks/posts/2022-julia-eindhoven/index.qmd), I thought I'd share a small companion blog post that highlights some useful tips and tricks for anyone interested in using Quarto with Julia. \n\n## General things\n\nWe will start in this section with a few general recommendations.\n\n### Setup\n\nI continue to recommend using VSCode for any work with Quarto and Julia. The Quarto [docs](https://quarto.org/docs/computations/julia.html#vs-code) explain how to get started by installing the necessary Quarto and IJulia extensions. Since most Julia users will regularly want to update their Julia version, I would additionally recommend to add `IJulia.jl` to your `~/.julia/config/startup.jl` file:^[Unrelated to Quarto, but this [thread](https://discourse.julialang.org/t/what-is-in-your-startup-jl/18228/21) on discourse is full of other useful ideas for your `startup.jl`.] \n\n```{.julia}\n# Setup OhMyREPL, Revise and Term\nimport Pkg\nlet\n    pkgs = [\"Revise\", \"OhMyREPL\", \"Term\", \"IJulia\"]\n    for pkg in pkgs\n        if Base.find_package(pkg) === nothing\n            Pkg.add(pkg)\n        end\n    end\nend\n```\n\nAdditionally, you only need to remember that ...\n\n> ... if you install a new Julia binary [...], you must update the IJulia installation [...] by running `Pkg.build(\"IJulia\")`\n> \n> --- Source: [IJulia docs](https://julialang.github.io/IJulia.jl/stable/manual/installation/#Updating-Julia-and-IJulia)\n\nI guess this step can also be automated in `~/.julia/config/startup.jl`, but haven't tried that yet. \n\n### Using `.ipynb` vs `.qmd`\n\nI also continue to recommend working with Quarto notebooks as opposed to Jupyter notebooks (files ending in `.qmd` and `.ipynb`, respectively). This is partially just based on preference (from R Markdown I'm used to working with `.Rmd` files), but there is also a good reason to consider using `.qmd`, even if you're used to working with Jupyter: the code chunks in your Quarto notebook automatically link to the Julia REPL in VSCode. In other words, you can run code chunks in your notebook and then access any variable that you may have created in the REPL. I find this quite useful, cause it allows me to quickly test code. Perhaps there's a good way to do this with Jupyter notebooks as well, but when I last used them I would always have to insert new code cells to test stuff. \n\nEither way switching between Jupyter and Quarto notebooks is straight-forward: `quarto convert notebook.qmd` will convert any Quarto notebook into a Jupyter notebook and vice versa. One potential benefit of Jupyter notebooks is their connection to Google Colab: it is possible to store Jupyter notebooks on Github and make them available on Colab, allowing users to quickly interact with your code without the need to clone anything. If this is important to you, you can still work with `.qmd` documents and simply specify `keep-ipynb: true` in the YAML header.\n\n### Dynamic Content\n\n> The world and the data that describes it is not static ðŸ“ˆ. Why should scientific outputs be?\n\nOne of the things I have always really loved about R Markdown was the ability to use inline code: the Knitr engine allows you to call and render any object `x` that you have created in preceding R chunks like this: `r x`. This is very powerful, because it enables us to bridge the gap between computations and output. In other words, it allows us to easily produce reproducible and dynamic content. \n\nUntil recently I had not been aware that this is also possible for Julia. Consider the following example. The code below depends on remote data that is continuously updated:\n\n::: {.cell execution_count=1}\n``` {.julia .cell-code}\nusing MarketData\nsnp = yahoo(\"^GSPC\")\n\nusing Dates\nlast_trade_day = timestamp(snp[end])[1]\np_close = values(snp[end,:Close])[1]\nlast_trade_day_formatted = Dates.format(last_trade_day, \"U d, yyyy\")\n```\n:::\n\n\nIt loads the most recent publicly available data on equity prices from Yahoo finance. In an ideal world, we'd like any updates to these inputs to be reflected in our output. That way you can just re-render the Quarto notebook to get an updated report. To render Julia code inline, we use `Markdown.jl` like so:\n\n::: {.cell execution_count=2}\n``` {.julia .cell-code}\nusing Markdown\nMarkdown.parse(\"\"\"\nWhen the S&P 500 last traded, on $(last_trade_day_formatted), it closed at $(p_close). \n\"\"\")\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\nWhen the S&P 500 last traded, on November 18, 2022, it closed at 3965.340088. \n\n:::\n:::\n\n\nIn practice, one would of course set `#| echo: false` in this case. Whatever content you publish, this approach will keep it up-to-date. This practice of simply re-rendering the source notebook also ensures that any other output remains up-to-date (e.g. @fig-snp)\n\n::: {.cell execution_count=3}\n\n::: {.cell-output .cell-output-display execution_count=4}\n![Price history of the S&P 500.](index_files/figure-html/fig-snp-output-1.svg){#fig-snp}\n:::\n:::\n\n\n### Code Execution\n\nRelated to the previous point, I typically define the following execution options in my `_quarto.yml` or `_metadata.yml`. The `freeze: auto` option ensures that documents are only rerendered if the source changes. In cases where code should always be re-executed you whould want to set `freeze: false`, instead. I set `output: false` because typically I have a lot of code chunks that don't generate any output that is of immediate interest to readers. \n\n```{.yml}\nexecute:\n  freeze: auto\n  eval: true\n  echo: true\n  output: false\n```\n\n### Reproducibility\n\nTo ensure that your content can be repoduced easily, it may additionally be helpful to explicitly specify the Julia version you used (`jupyter: julia-1.8`) and set up a global or local Julia environments. Inserting the following at the beginning of your Quarto notebook\n\n```{.julia}\nusing Pkg; Pkg.activate(\"<path>\")\n```\n\nensures that the desired environemnt that lives in `<path>` is actually activated and used. \n\n## Package Documentation\n\nI have also continued to use Quarto in combination with `Documenter.jl` to document my Julia packages. This essentially boils down to writing up documentation using interactive `.qmd` notebooks and then rendering those to `.md` files as inputs for `Documenter.jl`. There are a few good reasons for this approach, especially if you're used to working with Quarto anyway:\n\n1. Re-rendering any docs with `eval: true` provides an additional layer of quality assurance: if any of the code chunks throws an error, you know that your documentation is outdated (perhaps due to an API change). It also offers a straight-forward way to test package functions that produce non-testable (e.g. stochastic) output. In such cases, the use of `jldoctest` is not always straight-forward (see [here](https://github.com/JuliaDocs/Documenter.jl/issues/452)). \n2. You get some stuff for free, e.g. citation management. Unfortunately, as far as I'm aware there is still no support for cross-referencing.\n3. You can use Quarto execution options like `execute-dir: project` and `resources: www/` to globally specify the working directory and a directory for external resources like images. \n\nThere are also a few peculiarities to be aware of. To avoid any issues with `Documenter.jl`, I've found it useful to ensure that the rendered `.md` files do not contain any raw HTML and to preserve text wrapping:\n\n```{.yml}\nformat: \n  commonmark:\n    variant: -raw_html\n    wrap: preserve\n```\n\nWhen working with `.qmd` files you also need to use a slightly different syntax for [admonitions](https://documenter.juliadocs.org/stable/showcase/#Admonitions). The following syntax inside the `.qmd`\n\n```{.md}\n| !!! note \\\"An optional title\\\"\n|     Here is something that you should pay attention to.   \n```\n\nwill generate the desired output inside the rendered `.md`:^[See related [discussion](https://github.com/quarto-dev/quarto-cli/discussions/2947).]\n\n```{.md}\n!!! note \"An optional title\"\n    Here is something that you should pay attention to.   \n```\n\nAny of my package repos --- [`CounterfactualExplanations.jl`](https://github.com/pat-alt/CounterfactualExplanations.jl), [`LaplaceRedux.jl`](https://github.com/pat-alt/LaplaceRedux.jl), [`ConformalPrediction.jl`](https://github.com/pat-alt/ConformalPrediction.jl) --- should provide additional colour on this topic. \n\n## Quarto for Academic Journal Articles\n\nQuarto supports $\\LaTeX$ templates/classes, which has helped me with paper submissions in the past (e.g. my pending JuliaCon Proceedings submissions). I've found that [`rticles`](https://pkgs.rstudio.com/rticles/articles/rticles.html) still has an edge here, but the [list](https://quarto.org/docs/extensions/listing-journals.html) of out-of-the-box templates for journal articles is growing. Should I find some time in the future, I will try to add a template for JuliaCon Proceedings. The beauty of this is that it should enable publishers to not only use traditional forms of publication (PDF), but also include more dynamic formats with ease (think [distill](https://distill.pub/), but more than that.)\n\n## Wrapping up\n\nThis short post has provided a bit of an update on using Quarto with Julia. From my own experience so far, things have been getting easier and better (thanks to the amazing work of Quarto dev team). I'm exicted to see things improve even further and still think that Quarto is a revolutionary new tool for scientific publishing. Let's hope publishers eventually recognise this value ðŸ‘€.\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {}
  }
}