{
  "hash": "12c8a516630f3b41df8324386ede1628",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Trustworthy AI in Julia meets Supercomputing\nsubtitle: JuliaCon 2024\nauthor: Patrick Altmeyer\nformat:\n  julia-revealjs: \n    scrollable: true\ndate: last-modified\nbibliography: biblio.bib\nexecute:\n  freeze: auto\n  eval: true\n  echo: true\n  output: false\n---\n\n\n\n# [TaijaParallel.jl](https://github.com/JuliaTrustworthyAI/TaijaParallel.jl)\n\n[![Stable](https://img.shields.io/badge/docs-stable-blue.svg)](https://JuliaTrustworthyAI.github.io/TaijaParallel.jl/stable/)\n[![Dev](https://img.shields.io/badge/docs-dev-blue.svg)](https://JuliaTrustworthyAI.github.io/TaijaParallel.jl/dev/)\n[![Build Status](https://github.com/JuliaTrustworthyAI/TaijaParallel.jl/actions/workflows/CI.yml/badge.svg?branch=main)](https://github.com/JuliaTrustworthyAI/TaijaParallel.jl/actions/workflows/CI.yml?query=branch%3Amain)\n[![Coverage](https://codecov.io/gh/JuliaTrustworthyAI/TaijaParallel.jl/branch/main/graph/badge.svg)](https://codecov.io/gh/JuliaTrustworthyAI/TaijaParallel.jl)\n[![Code Style: Blue](https://img.shields.io/badge/code%20style-blue-4495d1.svg)](https://github.com/invenia/BlueStyle)\n[![Aqua QA](https://raw.githubusercontent.com/JuliaTesting/Aqua.jl/master/badge.svg)](https://github.com/JuliaTesting/Aqua.jl)\n\nThis package adds custom support for parallelization for certain [Taija](https://github.com/JuliaTrustworthyAI) packages.\n\n## What's Taija?\n\nGrowing ecosystem of packages geared towards *T*rustworthy *A*rtificial *I*ntelligence in *J*uli*a*---[Taija](https://github.com/JuliaTrustworthyAI).  \n\n\n```{mermaid}\n%%| echo: false\n%%| label: fig-overview\n%%| fig-cap: \"An overview of the Taija ecosystem.\"\n\n%%{\n  init: {\n    'theme': 'base',\n    'themeVariables': {\n      'primaryColor': '#BB2528',\n      'primaryTextColor': '#fff',\n      'primaryBorderColor': '#7C0000',\n      'lineColor': '#F8B229',\n      'secondaryColor': '#006100',\n      'tertiaryColor': '#e9edfb',\n      'fontFamily': \"avenir\"\n    }\n  }\n}%%\n\nflowchart TB\n\n    classDef taija fill:#389836,stroke:#333,color:#fff;\n    classDef core fill:#CB3C33,stroke:#333,color:#fff;\n    classDef base fill:#9558B2,stroke:#333,color:#fff;\n\n    %% Base\n    base[\"TaijaBase.jl\"]\n\n    %% Meta\n    interop[\"TaijaInteroperability.jl\"]\n    data[\"TaijaData.jl\"]\n    parallel[\"TaijaParallel.jl\"]\n    plotting[\"TaijaPlotting.jl\"]\n\n    %% Core\n    ce[\"CounterfactualExplanations.jl\"]\n    cp[\"ConformalPrediction.jl\"]\n    lr[\"LaplaceRedux.jl\"]\n    jem[\"JointEnergyModels.jl\"]\n\n    class base base;\n    class interop,data,parallel,plotting taija;\n    class ce,cp,lr,jem core;\n\n    %% Graph\n    subgraph \"Meta Packages\"\n        data & plotting & parallel & interop\n    end\n\n    subgraph \"Core Packages\"\n        ce & cp & lr & jem \n    end\n```\n\n\n## Why Supercomputing?\n\nEfforts towards trustworthy AI tend to increase the computational burden involved in training or inference:\n\n. . .\n\n- Explainable AI: we are often required to generate many explanations for many individuals.\n- Conformal Prediction: many techniques involve cross-validation or bootstrapping.\n- (Quasi) Bayesian DL like deep ensembles.\n\n. . .\n\n> Good news: all of these tasks can be parallelized!\n\n<!-- A firm that is using a machine learning model to screen out job applicants, for example, might be required to explain to each unsuccessful applicant why they were not admitted to the interview stage. In a different context, researchers may need to generate many explanations for evaluation and benchmarking purposes. -->\n\n# Motivating Example: Counterfactual Explanations\n\nThe package was developed to power [research](https://arxiv.org/abs/2312.10648) presented at AAAI 2024 [@altmeyer2024faithful]. The project involved large benchmarks of counterfactual explanations that had to be run on a supercomputer. \n\n## Benchmarking Explanations {.nostretch}\n\n- Final benchmark: total of **~10 million** counterfactuals across 8 datasets and different DL models.\n- Parallelized across **50 to 300 CPUs** on [DelftBlue](https://www.tudelft.nl/dhpc/system) using combination of multi-threading and -processing.\n\n![Gradients and counterfactuals for different generators. Source: @altmeyer2024faithful](www/poc_gradient_fields.png){width=75%}\n\n## Source Code\n\n- [ECCCo.jl](https://github.com/pat-alt/ECCCo.jl/tree/main) is a small package build for @altmeyer2024faithful that leverages and extends [CounterfactualExplanations.jl](https://github.com/JuliaTrustworthyAI/CounterfactualExplanations.jl), [ConformalPrediction.jl](https://github.com/JuliaTrustworthyAI/ConformalPrediction.jl), and [JointEnergyModels.jl](https://github.com/JuliaTrustworthyAI/JointEnergyModels.jl).\n- Parallelization is achieved through [TaijaParallel.jl](https://github.com/JuliaTrustworthyAI/TaijaParallel.jl/tree/main). \n- Functionality now being absorbed by CounterfactualExplanations.jl.\n\n. . .\n\n> Code is open-sourced and available on [GitHub](https://github.com/pat-alt/ECCCo.jl/tree/main).\n\n# The Package\n\n\n\n## User Interface\n\n::::{.columns}::::\n:::{.column width='50%'}\n\n> We aim to minimize the burden on users.\n\n- Users will mostly interact with custom macro `@with_parallelizer`. \n- In @fig-usage, `mpi` is an instance of type `MPIParallelizer`. \n\n:::\n:::{.column width='50%'}\n![Generating counterfactuals in parallel using MPI. See [docs](https://juliatrustworthyai.github.io/CounterfactualExplanations.jl/stable/tutorials/parallelization/) for details.](www/usage.png){#fig-usage}\n:::\n::::\n\n## High-level Architecture\n\n- [TaijaBase.jl](https://github.com/JuliaTrustworthyAI/TaijaBase.jl) ships basic parallelization [functions and symbols](https://github.com/JuliaTrustworthyAI/TaijaBase.jl/blob/main/src/parallelization/base.jl) to make them available to all Taija packages.\n  - `CounterfactualExplanations.benchmark`, for example, accepts a `parallelizer` argument of type `Union{Nothing,AbstractParallelizer}`.\n- [TaijaParallel.jl](https://github.com/JuliaTrustworthyAI/TaijaParallel.jl) adds out-of-the-box support for parallelization through multi-threading.\n- Multi-processing through [MPI.jl](https://github.com/JuliaParallel/MPI.jl) handled through an extension. \n\n## Backend\n\n- The `@with_parallelizer` macro defined [here](https://github.com/JuliaTrustworthyAI/TaijaParallel.jl/blob/8534c12b67a9f1ecda0186d992843d249e6a0a28/src/TaijaParallel.jl#L27C7-L27C24) parses inputs and calls the `parallelize` function.\n- `parallelize` is dispatched on the type of `parallelizer` and the function to be parallelized.\n- Easy to add support for new parallelization backends and functions by overloading `parallelize`.\n- Possible to combine different forms of parallelization, e.g., multi-threading and multi-processing (see [here](https://github.com/JuliaTrustworthyAI/TaijaParallel.jl/blob/8534c12b67a9f1ecda0186d992843d249e6a0a28/ext/MPIExt/generate_counterfactual.jl#L15) for an example).\n\n## Caveats and Future Work\n\n- The functions to be parallelized must be broadcastable: `generate_counterfactual`, for example, can be broadcasted over a batch of inputs.\n- Currently, the package only supports CounterfactualExplanations.jl.\n- Work on ConformalPrediction.jl is in progress, and hinges on the ability to parallelize cross-validation. Requires [changes](https://github.com/JuliaTrustworthyAI/ConformalPrediction.jl/pull/119) to ConformalPrediction.jl.\n\n## Small Benchmark\n\n# Questions? {.nostretch} \n\n![](/www/images/qr.png){width=\"25%\" fig-align=\"center\"}\n\n## References\n\n",
    "supporting": [
      "presentation_files"
    ],
    "filters": [],
    "includes": {}
  }
}