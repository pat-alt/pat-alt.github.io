[
  {
    "objectID": "posts/a-peek-inside-the-black-box-interpreting-neural-networks/index.html",
    "href": "posts/a-peek-inside-the-black-box-interpreting-neural-networks/index.html",
    "title": "A peek inside the ‘Black Box’ - interpreting neural networks",
    "section": "",
    "text": "Propelled by advancements in modern computer technology, deep learning has re-emerged as perhaps the most promising artificial intelligence (AI) technology of the last two decades. By treating problems as a nested, hierarchy of hidden layers deep artificial neural networks achieve the power and flexibility necessary for AI systems to navigate complex real-world environments. Unfortunately, their very nature has earned them a reputation as Black Box algorithms and their lack of interpretability remains a major impediment to their more wide-spread application.\nIn science, research questions usually demand not just answers but also explanations and variable selection is often as important as prediction (Ish-Horowicz et al. 2019). Economists, for example, recognise the undeniable potential of deep learning, but are rightly hesitant to employ novel tools that are not fully transparent and ultimately cannot be trusted. Similarly, real-world applications of AI have come under increasing scrutiny with regulators imposing that individuals influenced by algorithms should have the right to obtain explanations (Fan, Xiong, and Wang 2020). In high-risk decision-making fields such as AI systems that drive autonomous vehicles the need for explanations is self-evident (Ish-Horowicz et al. 2019).\nIn light of these challenges it is not surprising that research on explainable AI has recently gained considerable momentum (Arrieta et al. 2020). While in this short essay we will focus on deep learning in particular, it should be noted that this growing body of literature is concerned with a broader realm of machine learning models. The rest of this note is structured as follows: the first section provides a brief overview of recent advancements towards interpreting deep neural networks largely drawing on Fan, Xiong, and Wang (2020); the second section considers a novel entropy-based approach towards interpretability proposed by Crawford et al. (2019); finally, in the last section we will see how this approach can be applied to deep neural networks as proposed in Ish-Horowicz et al. (2019).\n\nInterpretable DL - a whistle-stop tour\nBefore delving further into how the intrinsics of deep neural networks can be disentangled we should first clarify what interpretability in the context of algorithms actually means. Fan, Xiong, and Wang (2020) describes model interpretability simply as the extent to which humans can “understand and reason” the model. This may concern an understanding of both the ad-hoc workings of the algorithm as well as the post-hoc interpretability of its output. In the context of linear regression, for example, ad-hoc workings of the model are often described through the intuitive idea of linearly projecting the outcome variable \\(\\mathbf{y}\\) onto the column space of \\(\\mathbf{X}\\). Post-hoc interpretations usually center around variable importance – the main focus of the following sections. Various recent advancements tackle interpretability of DNNs from different angles depending on whether the focus is on ad-hoc or post-hoc interpretability. Fan, Xiong, and Wang (2020) further asses that model interpretability hinges on three main aspects of simulatability, decomposability and algorithmic transparency, but for the purpose of this short note the ad-hoc vs. post-hoc taxonomy provides a simpler more natural framework. 1\nUnderstanding the ad-hoc intrinsic mechanisms of a DNN is inherently difficult. While generally transparency may be preserved in the presence of nonlinearity (e.g. decision trees), multiple hidden layers of networks (each of them) involving nonlinear operations are usually out of the realm of human comprehension (Fan, Xiong, and Wang 2020). Training also generally involves optimization of non-convex functions that involve an increasing number of saddle points as the dimensionality increases (Fan, Xiong, and Wang 2020). Methods to circumvent this problematic usually boil down to decreasing the overall complexity, either by regularizing the model or through proxy methods. Regularization – while traditionally done to avoid overfitting – has been found to be useful to create more interpretable representations. Monotonicity constraints, for example, impose that as the value of a specified covariate increases model predictions either monotonically decrease or increase. Proxy methods construct simpler representations of a learned DNN, such as a rule-based decision tree. This essentially involves repeatedly querying the trained network while varying the inputs and then deriving decision rules based on the model output.\nPost-hoc interpretability usually revolves around the understanding of feature importance. A greedy approach to this issue involves simply removing features one by one and checking how model predictions change. A more sophisticated approach along these lines is Shapley value, which draws on cooperative game theory. The Shapley value assigns varying payouts to players depending on their contribution to overall payout. In the context of neural networks input covariate \\(\\mathbf{X}_p\\) represents a player while overall payout is represented by the difference between average and individual outcome predictions.2 Exact computations of Shapley values are prohibitive as the dimensionality increases, though approximate methods have recently been developed (Fan, Xiong, and Wang 2020).\nThe remainder of this note focuses on a novel approach to feature extraction that measures entropy shifts in a learned probabilistic neural network in response to model inputs \\(\\mathbf{X_1},...,\\mathbf{X}_P\\). We will first introduce this methodology in the context of Gaussian Process regression in the following section before finally turning to its application to Bayesian neural networks.\n\n\nAn entropy-based approach to variable importance\nIsh-Horowicz et al. (2019) motivate their methodology for interpreting neural networks through Gaussian Process regression. Consider the following Bayesian regression model with Gaussian priors:\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& f(\\mathbf{X}|\\mathbf{w})&=\\phi(\\mathbf{X})^T\\mathbf{w} + \\varepsilon, &&\\varepsilon \\sim \\mathcal{N}(0,\\mathbf{I}) \\\\\n&& \\mathbf{w}& \\sim \\mathcal{N}(0,{1\\over{\\lambda}} \\mathbf{I})\\\\\n\\end{aligned}\n\\end{equation}\n\\tag{1}\\]\nThis naturally gives rise to a particular example of a Gaussian Process (GP). In particular, since \\(\\mathbf{u}(\\mathbf{X})=\\Phi(\\mathbf{X})^T\\mathbf{w}\\) is just a linear combination fo Gaussian random variables it follows a Gaussian Process itself\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& \\mathbf{u}(\\mathbf{X})=\\Phi(\\mathbf{X})^T\\mathbf{w}& \\sim \\mathcal{N}(\\mathbf{0}, \\mathbf{K}) \\\\\n\\end{aligned}\n\\end{equation}\n\\tag{2}\\]\nwhere \\(\\mathbf{K}\\) is the Kernel (or Gram) matrix and \\(K_{i,j}=k(\\mathbf{X_i,\\mathbf{X}_j})={1\\over{\\lambda}}\\phi(\\mathbf{X_i})^T\\phi(\\mathbf{X_m})\\) is the kernel function (Bishop 2006). In other words, the prior distribution over \\(\\mathbf{w}\\) induces a probability distribution over random functions \\(\\mathbf{u}(\\mathbf{X})\\). Similarly, the GP can be understood as a prior distribution over a an infinite-dimensional reproducible kernel Hilbert space (RKHS) (Crawford et al. 2019), which in a finite-dimensional setting becomes multivariate Gaussian.\nIn a standard linear regression model coefficients characterize the projection of the outcome variable \\(\\mathbf{y}\\) onto the column space of the regressors \\(\\mathbf{X}\\). In particular, with ordinary least square we define:\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& \\beta&=(\\mathbf{X}^T\\mathbf{X})^{-1}\\mathbf{X}^T\\mathbf{y} \\\\\n\\end{aligned}\n\\end{equation}\n\\tag{3}\\]\nThe primary focus here is to learn the mapping from input to output. The key differentiating feature between this approach and the non-parametric model in Equation 1 is the fact that in case of the latter we are interested in learning not only the mapping from inputs to outputs, but also the representation (\\(\\mathbf{u}(\\mathbf{X})\\)) of the inputs (see for example (Goodfellow, Bengio, and Courville 2016)). To be even more specific, treating the feature representation itself as random as in Equation 1 allows us to learn non-linear relationships between the covariates \\(\\mathbf{X}\\), since they are implicitly captured by the RKHS (Crawford et al. 2019). Neural networks share this architecture and hence it is worth dwelling on it a bit further: the fact that the learned model inherently incorporates variable interactions leads to the observation that an individual feature is rarely important on its own with respect to the mapping from \\(\\mathbf{X}\\) to \\(\\mathbf{y}\\) (Ish-Horowicz et al. 2019). Hence, in order to gain an understanding of individual variable importance, one should aim to understand what role feature \\(\\mathbf{X}_j\\) plays within the learned model, thereby taking into account its interactions with other covariates. Formally, Crawford et al. (2019) and define the effect size analogue as the equivalent of the familiar regression coefficient in the non-parametric setting\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& \\tilde\\beta&=\\mathbf{X}^+\\Phi^T\\mathbf{w}=\\mathbf{X}^+\\mathbf{u} \\\\\n\\end{aligned}\n\\end{equation}\n\\tag{4}\\]\nwhere \\(\\mathbf{X}^+=\\lim_{\\alpha} (\\mathbf{X}^T\\mathbf{X}+\\alpha \\mathbf{I})^{-1}\\mathbf{X}^T\\) denotes the Moore-Penrose pseudo-inverse (see for example Goodfellow, Bengio, and Courville (2016)). Intuitively the effect size analogue can be thought of as the resulting coefficients from regressing the fitted values \\(\\hat{\\mathbf{u}}\\) from the learned probabilistic model on the covariates \\(\\mathbf{X}\\). It can be interpreted in the same way as linear regression coefficients, in the sense that \\(\\tilde\\beta_j\\) describes the marginal change in \\(\\mathbf{u}\\) given a unit increase in \\(\\mathbf{X}_j\\) holding all else constant. Note here the subtle, but crucial difference between Equation 3 – a projection from the outcome variable onto the column space of \\(\\mathbf{X}\\) – and Equation 4 – a projection from the learned model to \\(\\mathbf{X}\\). In other words, looking at \\(\\tilde\\beta\\) can be thought of peeking directly into the Block Box. Unfortunately, as Crawford et al. (2019) point out, working with Equation 4 is usually not straight-forward. From a practitioner’s point of view, it may also not be obvious how to interpret a coefficient that describes marginal effects of input variables on a learned model. A more useful indicator in this context would provide a measure of how much individual variables contribute to the overall variation in the learned model. For this purpose Crawford et al. (2019) propose to work with a distributional centrality measure based on \\(\\tilde\\beta\\), which we shall turn to next.\nThe proposed methodology in Crawford et al. (2019) and Ish-Horowicz et al. (2019) depends on the availability of a posterior distribution over \\(\\tilde\\beta\\) in that it measures its entropic shifts in response to the introduction of covariates. The intuition is straight-forward: within the context of the learned probabilistic model is covariate \\(\\mathbf{X}_j\\) informative or not? More formally this boils down to determining if the posterior distribution of \\(p(\\tilde\\beta_{-j})\\) is dependent on the effect of \\(\\tilde\\beta_j\\). This can be quantified through the Kullback-Leibler divergence (KLD) between \\(p(\\tilde\\beta_{-j})\\) and the conditional posterior \\(p(\\tilde\\beta_{-j}|\\tilde\\beta_j)\\):\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& \\text{KLD}_j&=\\text{KL}\\left(p(\\tilde\\beta_{-j}) || p(\\tilde\\beta_{-j}|\\tilde\\beta_j)\\right) \\\\\n\\end{aligned}\n\\end{equation}\n\\tag{5}\\]\nCovariates that contribute significant information to the model will have \\(\\text{KLD}>0\\), while for insignificant covariates \\(\\text{KLD}\\approx0\\). The measure of induced entropy change gives rise to a ranking of the covariates in terms of their relative importance in the model. The RATE criterion of variable \\(\\mathbf{X}_j\\) is then simply defined as\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& \\gamma_j&=\\frac{\\text{KLD}_j}{\\sum_{p=1}^{P}\\text{KLD}_p}\\in[0,1] \\\\\n\\end{aligned}\n\\end{equation}\n\\tag{6}\\]\nwhich in light of its bounds can naturally be interpreted as \\(\\mathbf{X}_j\\)`s percentage contribution to the learned model. It is worth noting that \\(p(\\tilde\\beta_{-j}|\\tilde\\beta_j)\\) of course depends on the value of the conditioning variable. A natural choice is \\(\\tilde\\beta_j=0\\) which usually corresponds to the null hypothesis.\n\n\nApplication to Bayesian neural networks\nIn order to use the RATE criterion in the context of deep learning we need to work in the Bayesian setting. Contrary to standard artificial neural networks which work under the assumption that weights have some true latent value, Bayesian neural networks place a prior distribution over network parameters and hence treat weights as random variables (Goan and Fookes 2020). Not only does it perhaps seem more natural to treat unobserved weights as random, but the Bayesian setting also naturally gives rise to reason about uncertainty in predictions, which can ultimately help us develop more trustworthy models (Goan and Fookes 2020). A drawback of BNNs is that exact computation of posteriors is computationally challenging and often intractable (a non-trivial issue that we will turn back to in a moment).\nWhen the prior placed over parameters is Gaussian, the output of the BNN approaches a Gaussian Process as the width of the network grows, in line with the discussion in the previous section. This is exactly the assumption that Ish-Horowicz et al. (2019) work with. They propose an architecture for a multi-layer perceptron (MLP) composed of (1) an input layer collecting covariates \\(\\mathbf{X}_1,...,\\mathbf{X}_p\\), (2) a single deterministic, hidden layer and (3) an outer layer producing predictions from a probabilistic model \\(\\mathbf{u}(\\mathbf{X})\\). Let \\(\\mathbf{X}\\) be a \\((N \\times P)\\) matrix of covariates. Then formally, we have\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& \\hat{\\mathbf{y}}&=\\sigma(\\mathbf{u}) \\\\\n&& \\mathbf{u}(\\mathbf{Z})&=\\mathbf{Z}(\\mathbf{X})\\mathbf{w}^{(L+1)}, && \\mathbf{w}^{(L+1)} \\sim \\mathcal{N}(\\mathbf{m}, \\mathbf{V}) \\\\\n&& \\mathbf{Z}(\\mathbf{X})&=f(\\mathbf{X}\\mathbf{w}^{(L)}) \\\\\n\\end{aligned}\n\\end{equation}\n\\tag{7}\\]\nwhere \\(\\sigma(.)\\) is a link function and \\(\\mathbf{u}(\\mathbf{X})\\) represents the probabilistic model learned in the outer layer with weights \\(\\mathbf{w}^{(L+1)}\\) assumed to be Gaussian random variables.3 Finally, \\(\\mathbf{Z}(\\mathbf{X})\\) denotes the inner (or more generally penultimate) layer, an \\((N \\times P)\\) matrix of neural activations through \\(f:(\\mathbf{X}\\mathbf{w}^{(L)})\\mapsto \\mathbf{Z}\\). Ish-Horowicz et al. (2019) work with a simple single-layer MLP, but it should be evident that this be extended to arbitrary depth and complexity, while still maintaining the high-level structure imposed by Equation 7. This flexibility allows RATE to be applied to a wide range of Bayesian network architectures, since all that is really required is the posterior distribution over weights \\(\\mathbf{w}^{(L+1)}\\), which arises from the probabilistic outer layer. The fact that only the outer layer needs to be probabilistic has the additional benefit of mitigating the computational burden that comes with Bayesian inference, which was mentioned earlier.\nHaving established this basic, flexible set-up the Ish-Horowicz et al. (2019) go on to derive closed-form expressions for RATE in this setting. The details are omitted here since the logic is largely analogous to what we learned above, but can be found in Ish-Horowicz et al. (2019).\n\n\nConclusion\nThe RATE criterion originally proposed by Crawford et al. (2019) and shown to be applicable to Bayesian neural networks in Ish-Horowicz et al. (2019) offers an intuitive way to measure variable importance in the context of deep learning. By defining variable importance as the contribution inputs make to a probabilistic model, it implicitly incorporates the interactions between covariates and nonlinearities that the model has learned. In other words, it allows researchers to peek directly into the Black Box. This opens up interesting avenues for future research, as the approach can be readily applied in academic disciplines and real-world applications that rely heavily on explainability of outcomes.\n\n\n\nReferences\n\n\nArrieta, Alejandro Barredo, Natalia Diaz-Rodriguez, Javier Del Ser, Adrien Bennetot, Siham Tabik, Alberto Barbado, Salvador Garcia, et al. 2020. “Explainable Artificial Intelligence (XAI): Concepts, Taxonomies, Opportunities and Challenges Toward Responsible AI.” Information Fusion 58: 82–115.\n\n\nBishop, Christopher M. 2006. Pattern Recognition and Machine Learning. springer.\n\n\nCrawford, Lorin, Seth R Flaxman, Daniel E Runcie, and Mike West. 2019. “Variable Prioritization in Nonlinear Black Box Methods: A Genetic Association Case Study.” The Annals of Applied Statistics 13 (2): 958.\n\n\nFan, Fenglei, Jinjun Xiong, and Ge Wang. 2020. “On Interpretability of Artificial Neural Networks.” Preprint at Https://Arxiv. Org/Abs/2001.02522.\n\n\nGoan, Ethan, and Clinton Fookes. 2020. “Bayesian Neural Networks: An Introduction and Survey.” In Case Studies in Applied Bayesian Data Science, 45–87. Springer.\n\n\nGoodfellow, Ian, Yoshua Bengio, and Aaron Courville. 2016. Deep Learning. MIT Press.\n\n\nIsh-Horowicz, Jonathan, Dana Udwin, Seth Flaxman, Sarah Filippi, and Lorin Crawford. 2019. “Interpreting Deep Neural Networks Through Variable Importance.” arXiv Preprint arXiv:1901.09839.\n\n\n\n\n\n\n\n\n\n\nFootnotes\n\n\nSimulatability describes the overall, high-level understandability of the mechanisms underlying the model – put simply, the less complex the model, the higher its simulatability. Decomposability concerns the extent to which the model can be taken apart into smaller pieces – neural networks by there very nature are compositions of multiple layers. Finally, algorithmic transparency refers to the extent to which the training of the algorithm is well-understood and to some extent observable – since DNNs generally deal with optimization of non-convex functions and often lack unique solution they are inherently intransparent.↩︎\nFor more detail see for example here.↩︎\nFor simplicity I have omitted the deterministic bias term.↩︎\n\nCitationBibTeX citation:@online{altmeyer2021,\n  author = {Patrick Altmeyer},\n  title = {A Peek Inside the “{Black} {Box}” - Interpreting Neural\n    Networks},\n  date = {2021-02-07},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nPatrick Altmeyer. 2021. “A Peek Inside the ‘Black\nBox’ - Interpreting Neural Networks.” February 7, 2021."
  },
  {
    "objectID": "posts/how-i-m-building-this-website-in-r/index.html",
    "href": "posts/how-i-m-building-this-website-in-r/index.html",
    "title": "How I’m building this website in R",
    "section": "",
    "text": "Note\n\n\n\nUpdate on Feb 20, 2022\nThe post below was written when I still used blogdown in combination with Hugo to build this blog. I have recently migrated the blog (along pretty much everything else I do) to quarto.\n\nQuarto® is an open-source scientific and technical publishing system built on Pandoc.\n\nBased on my first few experiences I would go further and say that quarto is the only open-source scientific and technical publishing system you’ll ever need. The project is supported by RStudio and (unsurprisingly) Yihui Xie is one of the contributors. Go check it out!"
  },
  {
    "objectID": "posts/how-i-m-building-this-website-in-r/index.html#getting-started",
    "href": "posts/how-i-m-building-this-website-in-r/index.html#getting-started",
    "title": "How I’m building this website in R",
    "section": "Getting started",
    "text": "Getting started\nIt turns out building a static website in R is remarkably easy, as long as you know your way around R Markdown. Knowledge of HTML and CSS helps, but is not strictly necessary and can be acquired along the way. My package of choice for this website is blogdown by Yihui Xie who has had a major impact on the R community through his many package contributions (knitr, bookdown, pagedown, …) and certainly made my life a lot easier on many occasions.\nTo get started just follow the instructions on blogdown’s GitHub repository or keep reading here for a high-level overview. Setting up a basic website in R requires exactly two steps:\n\nSet up a local directory for the website. Let’s suppose you create it here ~/Documents/myAwesomeWebsite.\nIn R, navigate to the directory and simply run blogdown::newsite().\n\nThis will set up a basic template which you can develop. Changing the theme and playing with the basic structure of the website is relatively straight-forward. Personally I have so far managed to work things out based on a working knowledge of HTML and CSS that I’ve developed in the past through my work with R Shiny."
  },
  {
    "objectID": "posts/how-i-m-building-this-website-in-r/index.html#deploying-your-website",
    "href": "posts/how-i-m-building-this-website-in-r/index.html#deploying-your-website",
    "title": "How I’m building this website in R",
    "section": "Deploying your website",
    "text": "Deploying your website\nThere are various ways to deploy your website, i.e. make it accessible to the public. This website is deployed through GitHub pages. Detailed instructions on how to do this can be found here. Since I already had an existing local clone of my pat-alt.github.io repo, I just dropped it in the source directory of the website:\nsource/\n│\n├── config.yaml\n├── content/\n├── themes/\n└── ...\n\npatalt.github.io/\n│\n├── .git/\n├── .nojekyll\n├── index.html\n├── about/\n└── ...\nAfter adding publishDir: pat-alt.github.io to my config.yaml and then running blogdown::hugo_build() the website was built inside the clone. All that was left to do was to commit changes from the local clone to the pat-alt.github.io remote repo. A few moments later the website was already up and running."
  },
  {
    "objectID": "posts/how-i-m-building-this-website-in-r/index.html#why-all-the-trouble",
    "href": "posts/how-i-m-building-this-website-in-r/index.html#why-all-the-trouble",
    "title": "How I’m building this website in R",
    "section": "Why all the trouble?",
    "text": "Why all the trouble?\nThere are certainly easier ways to build a website. But if like me you do pretty much all your work in R Markdown and want to share some of it, then you will love blogdown. The beauty of it is that once the basic infrastructure is set up, adding content is as simple as running the following wrapper function\n\n\nShow the code\nblogdown::new_post(\"Your new post\", ext = \".Rmd\")\n\n\nwhere the first argument is just the title of your post and the ext argument can be used to specify that you want to create an R Markdown document that can include code chucks. The wrapper function will automatically set up a directory for your post under /post/. R Studio will redirect you to the relevant .Rmd file that you can then fill with content. By default that folder will look roughly like this:\n├── index.Rmd\n├── index.html\n└── index_files\n    └── header-attrs\n        └── header-attrs.js"
  },
  {
    "objectID": "posts/how-i-m-building-this-website-in-r/index.html#a-simple-coding-example",
    "href": "posts/how-i-m-building-this-website-in-r/index.html#a-simple-coding-example",
    "title": "How I’m building this website in R",
    "section": "A simple coding example",
    "text": "A simple coding example\nAs you can probably tell from the code chunks above this post was created just in the way I described. So I thought I might as well go ahead with a simple coding example to add some flavour. Suppose you have built some function that you think is worth sharing with the world or simply learned something new and interesting. As a case in point, I recently had a look at the Rcpp package and wrote a small program in C++ to be used in R. Since R Markdown supports Rcpp code chunks (along with Python, bash, SQL, …) it is straight-forward to show-case that code on this website.\nThe program can be used to simulate data from a categorical distribution. This distribution describes the possible results of a random variable that can take on one of \\(K\\) possible categories with different probabilities. In base R we could use rmultinom(n=1000,1,p=c(0.5,0.1,0.4)) to simulate draws from one such distribution with three different categories. Alternatively, we could write the program in C++ as follows:\n\n\nShow the code\n#include <Rcpp.h>\nusing namespace Rcpp;\n\n// [[Rcpp::export]]\nNumericMatrix simCategorical(int n, NumericVector p) {\n  int k = p.size();\n  NumericMatrix mat(k, n);\n  // Normalise prob if necessary:\n  if (sum(p)!=1) {\n    p = p/sum(p);\n  }\n  NumericVector emp_cdf = cumsum(p);\n  NumericVector u = Rcpp::runif(n, 0, 1);\n  // Matrix for 1-hot-encoding:\n  for (int j = 0; j < n; j++) {\n    // Perform binary search:\n    int l = 0;\n    int r = k;\n    double target = u[j];\n    while (l < r) {\n      int m = floor((l+r)/2);\n      if (emp_cdf[m] > target) {\n        r = m;\n      } else {\n        l = m+1;\n      }\n    }\n    mat(r,j) = 1;\n  }\n  return mat;\n}\n\n\nIn terms of performance it turns out that the simple C++ program actually does somewhat better than the base R alternative:\n\n\nShow the code\nlibrary(microbenchmark)\nlibrary(ggplot2)\nn <- 1000\np <- c(0.5,0.1,0.4)\nmb <- microbenchmark(\n    \"rmultinom\" = {rmultinom(n, 1, p)},\n    \"Rcpp\" = {simCategorical(n, p)}\n)\nautoplot(mb)"
  },
  {
    "objectID": "posts/how-i-m-building-this-website-in-r/index.html#embedding-existing-work",
    "href": "posts/how-i-m-building-this-website-in-r/index.html#embedding-existing-work",
    "title": "How I’m building this website in R",
    "section": "Embedding existing work",
    "text": "Embedding existing work\nIf you have some existing work that you would like to share you can just use it to overwrite the index.Rmd file. blogdown supports any kind of R Markdown documents so you can use all of your favourite markdown packages (bookdown, pagedown, …). Just make sure to specify HTML output in the YAML header."
  },
  {
    "objectID": "posts/how-i-m-building-this-website-in-r/index.html#resources",
    "href": "posts/how-i-m-building-this-website-in-r/index.html#resources",
    "title": "How I’m building this website in R",
    "section": "Resources",
    "text": "Resources\nFor more information about blogdown see here. To inspect the code that builds this website check out my GitHub repository."
  },
  {
    "objectID": "posts/individual-recourse-for-black-box-models/index.html",
    "href": "posts/individual-recourse-for-black-box-models/index.html",
    "title": "Individual recourse for Black Box Models",
    "section": "",
    "text": "In her popular book Weapons of Math Destruction Cathy O’Neil presents the example of public school teacher Sarah Wysocki, who lost her job after a teacher evaluation algorithm had rendered her redundant (O’neil 2016). Sarah was highly popular among her peers, supervisors and students.\nThis post looks at a novel algorithmic solution to the problem that individuals like Sarah, who are faced with an undesirable outcome, should be provided with means to revise that outcome. The literature commonly refers to this as individual recourse. One of the first approaches towards individual recourse was proposed by Ustun, Spangher, and Liu (2019). In a recent follow-up paper, Joshi et al. (2019) propose a methodology coined REVISE, which extends the earlier approach in at least three key ways:\nFor a detailed discussion of these points you may check out this slide deck or consult the paper directly (freely available on DeepAI). Here, we will abstract from some of these complications and instead look at an application of a slightly simplified version of REVISE. This should help us to first build a good intuition. Readers interested in the technicalities and code may find all of this in the annex below."
  },
  {
    "objectID": "posts/individual-recourse-for-black-box-models/index.html#from-to",
    "href": "posts/individual-recourse-for-black-box-models/index.html#from-to",
    "title": "Individual recourse for Black Box Models",
    "section": "From 🐱 to 🐶",
    "text": "From 🐱 to 🐶\n\n\n\nWe will explain REVISE through a short tale of cats and dogs. The protagonist of this tale is Kitty 🐱, a young cat that identifies as a dog. Unfortunately, Kitty is not very tall and her tail, though short for a cat, is longer than that of the average dog (Figure 1).\n\n\n\n\n\n\n\n\nFigure 1: Empirical distributions of simulated data set describing cats and dogs. Vertical stalks represent Kitty’s attribute values.\n\n\n\n\nMuch to her dismay, Kitty has been recognized as a cat by a linear classifier \\(g_n(X)\\) that we trained through stochastic gradient descent using the data on animals’ height and tail length. Once again interested readers may find technical details and code in the annex below. Figure 2 shows the resulting linear separation in the attribute space with the decision boundary in solid black and Kitty’s location indicated by a red circle. Can we provide individual recourse to Kitty?\n\n\n\n\n\n\n\n\nFigure 2: Linear separation of cats and dogs in the 2-dimensional attribute space with the decision boundary of the fitted classifier in solid black. Kitty’s location is indicated by a red circle.\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s see if and how we can apply REVISE to Kitty’s problem. The following summary should give you some flavour of how the algorithm works:\n\nInitialize \\(\\mathbf{x}_i'^{(0)}\\), that is the attributes that will be revised recursively. Kitty’s original attributes seem like a reasonable place to start.\nThrough gradient descent recursively revise \\(\\mathbf{x}_i'^{(t)}\\) until \\(g_n(\\mathbf{x}_i'^{(T)})=\\)🐶. At this point \\(T\\) the descent terminates since for these revised attributes the classifier labels Kitty as a dog.\nReturn \\(\\delta_i=\\mathbf{x}_i'^{(T)}-\\mathbf{x}_i\\), that is the individual recourse for Kitty.\n\nFigure 3 illustrates what happens when this approach is applied to Kitty’s problem. The different panels show the results for different values of a regularization parameter \\(\\lambda\\) that governs the trade-off between achieving the desired label switch and keeping the distance between the original (\\(\\mathbf{x}_i\\)) and revised (\\(\\mathbf{x}_i'\\)) attributes small. In all but one case, REVISE converges: a decrease in tail length along with an increase in height eventually allows Kitty to cross the decision boundary. In other words, we have successfully turned Kitty into a dog - at least in the eyes of the linear classifier!\nWe also observe that as we increase \\(\\lambda\\) for a fixed learning rate, REVISE takes longer to converge. This should come as no surprise, since higher values of \\(\\lambda\\) lead to greater regularization with respect to the penalty we place on the distance that Kitty has to travel. When we penalize too much (\\(\\lambda=10\\)), Kitty never reaches the decision boundary, because she is reluctant to change her characteristics beyond a certain point. While not visible to the naked eye, in this particular example \\(\\lambda=0.001\\) corresponds to the best choice among the candidate values.\n\n\n\n\n\nFigure 3: The simplified REVISE algorithm in action: how Kitty crosses the decision boundary by changing her attributes. Regularization with respect to the distance penalty increases from top left to bottom right."
  },
  {
    "objectID": "posts/individual-recourse-for-black-box-models/index.html#discussion",
    "href": "posts/individual-recourse-for-black-box-models/index.html#discussion",
    "title": "Individual recourse for Black Box Models",
    "section": "Discussion",
    "text": "Discussion\nWhile hopefully Kitty’s journey has provided you with some useful intuition, the story is of course very silly. Even if your cat ever seems to signal that she wants to be a dog, helping her cross that decision boundary will be tricky. Some attributes are simply immutable or very difficult to change, which Joshi et al. (2019) do not fail to account for in their framework. Their proposed methodology offers a simple and ingenious approach towards providing individual recourse. Instead of concerning ourselves with Black Box interpretability, why not simply provide remedy in case things go wrong?\nTo some extent that idea has its merit. As this post has hopefully shown, REVISE is straight-forward to understand and readily applicable. It could be a very useful tool to provide individual recourse in many real-world applications. As the implementation of our simplified version of REVISE demonstrates, researchers should also find it relatively easy to develop the methodology further and tailor it to specific use cases. The simpler version here, for example, may be useful in settings where the dimensionality is relatively small and one can reasonably model the distribution of attributes without the need for generative models.\nStill, you may be wondering: if the original classifier is based on poorly defined rules and proxies, then what good does REVISE really do? Going back to the example of high-school teacher Sarah Wysocki, one of the key attributes determining teachers’ evaluations was their students’ performance. Realizing this, some teachers took the shortest route to success by artificially inflating their students’ test scores. That same course of action may well have been suggested by REVISE. As Joshi et al. (2019) demonstrate, this very property of REVISE may actually proof useful in detecting weaknesses of decision making systems before setting them loose (key contribution 3).\nNonetheless, the example above also demonstrates that approaches like REVISE, useful as they may be, tend to provide solutions for very particular problems. In reality data-driven decision making systems are often subject to many different problems and hence research on trustworthy AI will need to tackle the issue from various angles. A few places to start include the question of dealing with data that is inherently biased, improving ad-hoc and post-hoc model interpretability and continuing efforts around causality-inspired AI."
  },
  {
    "objectID": "posts/individual-recourse-for-black-box-models/index.html#references",
    "href": "posts/individual-recourse-for-black-box-models/index.html#references",
    "title": "Individual recourse for Black Box Models",
    "section": "References",
    "text": "References\n\n\nJoshi, Shalmali, Oluwasanmi Koyejo, Warut Vijitbenjaronk, Been Kim, and Joydeep Ghosh. 2019. “Towards Realistic Individual Recourse and Actionable Explanations in Black-Box Decision Making Systems.” arXiv Preprint arXiv:1907.09615.\n\n\nO’neil, Cathy. 2016. Weapons of Math Destruction: How Big Data Increases Inequality and Threatens Democracy. Crown.\n\n\nUstun, Berk, Alexander Spangher, and Yang Liu. 2019. “Actionable Recourse in Linear Classification.” In Proceedings of the Conference on Fairness, Accountability, and Transparency, 10–19."
  },
  {
    "objectID": "posts/individual-recourse-for-black-box-models/index.html#annex",
    "href": "posts/individual-recourse-for-black-box-models/index.html#annex",
    "title": "Individual recourse for Black Box Models",
    "section": "Annex",
    "text": "Annex\nIn my blog posts I aim to implement interesting ideas from scratch even if that sometimes means that things need to undergo some sort of simplification. The benefit of this approach is that the experience is educationally rewarding - both for myself and hopefully also for readers. The first two sections of this annex show how REVISE and linear classification can be implemented in R. The final section just shows how the synthetic data was generated. To also inspect the code that generates the visualizations and everything else, you can find the source code of this file on GitHub.\n\nLinear classifier\nLinear classification is implemented through stochastic gradient descent (SGD) with Hinge loss\n\\[\n\\begin{aligned}\n&& \\ell(-\\mathbf{w}^T\\mathbf{x}_i y_i)&=(1-\\mathbf{w}^T\\mathbf{x}_i y_i)_+ \\\\\n\\end{aligned}\n\\]\nwhere \\(\\mathbf{w}\\) is a coefficient vector, \\(\\mathbf{x}_i\\) is the attribute vector of individual \\(i\\) and \\(y_i\\) is the individual’s outcome. Since we apply SGD in order to minimize the loss function \\(\\ell\\) by varying \\(\\mathbf{w}\\), we need an expression for its gradient with respect to \\(\\mathbf{w}\\), which is given by:\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& \\nabla_{\\mathbf{W}} \\left( \\ell(-\\mathbf{w}^T\\mathbf{x}_i y_i) \\right) &= \\begin{cases} -\\mathbf{x}_i y_i & \\text{if} \\ \\ \\ \\mathbf{w}^T\\mathbf{x}_i y_i \\le 1\\\\ 0 & \\text{otherwise} \\end{cases} \\\\\n\\end{aligned}\n\\end{equation}\n\\tag{1}\\]\nThe code below uses this analytical solution to perform SGD over \\(T\\) iterations or as long as updates yield feasible parameter values. As the final vector of coefficients the function returns \\(\\mathbf{\\bar{w}}= \\frac{1}{T} \\sum_{t=1}^{T} \\mathbf{w}_t\\). Denoting the optimal coefficient vector as \\(\\mathbf{w}^*\\), it can be shown that under certain conditions \\(\\ell(\\mathbf{\\bar{w}})\\rightarrow\\ell(\\mathbf{w}^*)\\) as \\(T\\rightarrow\\infty\\).\n\n\nREVISE (simplified)\nAs flagged above, we are looking at a slightly simplified version of the algorithm presented in Joshi et al. (2019). In particular, the approach here does not incorporate the threshold on the likelihood nor does it account for immutable attributes.\nLet \\(y\\in\\{-1,1\\}\\) be a binary outcome variable, \\(X\\in\\mathbb{R}^d\\) a feature matrix containing individuals’ attributes and \\(g_n(X)\\) a corresponding data-dependent classifier. Suppose \\(y_i=-1\\) (the negative outcome) for some individual characterized by attributes \\(\\mathbf{x}_i\\). Then we want to find \\(\\mathbf{x}_i'\\) closest to \\(\\mathbf{x}_i\\) such that the classifier assigns the positive outcome \\(g(\\mathbf{x}_i^{'})=1\\). In order to do so, we use gradient descent with Hinge loss \\(\\ell\\) to minimize the following function\n\\[\n\\begin{aligned}\n&& \\min_{\\mathbf{x}_i^{'}}& \\ \\ell(g_n(\\mathbf{x}_i^{'}),1) + \\lambda d(\\mathbf{x}_i^{'},\\mathbf{x}_i) \\\\\n\\end{aligned}\n\\]\nwhere \\(d=||\\mathbf{x}_i^{'}-\\mathbf{x}_i||\\) denotes the Euclidean distance. Note that this time we take the coefficient vector defining \\(g_n\\) as given and instead vary the attributes. In particular, we will perform gradient descent steps as follows\n\\[\n\\begin{aligned}\n&& {\\mathbf{x}_i^{'}}^t&\\leftarrow {\\mathbf{x}_i^{'}}^{t-1} + \\eta \\nabla_{{\\mathbf{x}_i^{'}}} \\left( \\ell(g_n(\\mathbf{x}_i^{'}),1) + \\lambda d(\\mathbf{x}_i^{'},\\mathbf{x}_i)  \\right)  \\\\\n\\end{aligned}\n\\]\nwhere \\(\\eta\\) is the learning rate. The descent step is almost equivalent to the one described in Joshi et al. (2019), but here we greatly simplify things by optimizing directly in the attribute space instead of a latent space. The gradient of the loss function looks very similar to Equation 1. With respect to the Euclidean distance partial derivatives are of the following form:\n\\[\n\\begin{aligned}\n&&  \\frac{\\partial ||\\mathbf{x}_i^{'}-\\mathbf{x}_i||}{\\partial {x_i'}^{(d)}}  &= \\frac{{x_i'}^{(d)}-{x_i}^{(d)}}{||\\mathbf{x}_i^{'}-\\mathbf{x}_i||} \\\\\n\\end{aligned}\n\\]\nThe code that implements this optimization follows below.\n\n\nSimulated data\nThe synthetic data describing cats and dogs was generated as follows:\n\n\nShow the code\nsim_data <- function(n=100,averages,noise=0.1) {\n  d <- ncol(averages)\n  y <- 2*(rbinom(n,1,0.5)-0.5) # generate binary outcome: 1=dog, -1=cat\n  X <- as.matrix(averages[(y+1)/2+1,]) # generate attributes conditional on y\n  dogs <- y==1 # boolean index for dogs\n  cats <- y==-1 # boolean index for cats\n  X[cats,] <- X[cats,] + \n    matrix(rnorm(sum(cats)*d),nrow=sum(cats)) %*% diag(noise*averages[2,]) # add noise for y=1 (cats)\n  X[dogs,] <- X[dogs,] + \n    matrix(rnorm(sum(dogs)*d),nrow=sum(dogs)) %*% diag(noise*averages[2,]) # add noise for y=1 (dogs)\n  return(list(X=X,y=y))\n}"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome",
    "section": "",
    "text": "Having worked with R Markdown and some of Yihui Xie’s amazing packages for years, I have only now come across his blogdown package. For a while I have been thinking about a good way to share some of my work and actually started collecting snippets in a Gitbook through bookdown quite some time ago. While the book is a work-in-progress that I aim to finish eventually, I will use this website to regularly share content related to my work, research and other things.\n\n\n\n\n\n\nNote\n\n\n\nUpdate on Feb 20, 2022\nI have recently migrated this blog and pretty much everything else I do to quarto.\n\nQuarto® is an open-source scientific and technical publishing system built on Pandoc.\n\nBased on my first few experiences I would go further and say that quarto is the only open-source scientific and technical publishing system you’ll ever need. The project is supported by RStudio and (unsurprisingly) Yihui Xie is one of the contributors. Go check it out!\n\n\n\n\n\n\n\nCitationBibTeX citation:@online{altmeyer2021,\n  author = {Patrick Altmeyer and Patrick Altmeyer},\n  title = {Welcome},\n  date = {2021-02-01},\n  langid = {en}\n}\nFor attribution, please cite this work as:\nPatrick Altmeyer, and Patrick Altmeyer. 2021. “Welcome.”\nFebruary 1, 2021."
  },
  {
    "objectID": "posts/a-new-tool-for-explainable-ai/index.html",
    "href": "posts/a-new-tool-for-explainable-ai/index.html",
    "title": "A new tool for explainable AI",
    "section": "",
    "text": "Turning a 9 (nine) into a 4 (four).\nCounterfactual explanations, which I introduced in one of my previous posts1, offer a simple and intuitive way to explain black-box models without opening them. Still, as of today there exists only one open-source library that provides a unifying approach to generate and benchmark counterfactual explanations for models built and trained in Python (Pawelczyk et al. 2021). This is great, but of limited use to users of other programming languages 🥲.\nEnter CounterfactualExplanations.jl: a Julia package that can be used to explain machine learning algorithms developed and trained in Julia, Python and R. Counterfactual explanations fall into the broader category of explainable artificial intelligence (XAI).\nExplainable AI typically involves models that are not inherently interpretable but require additional tools to be explainable to humans. Examples of the latter include ensembles, support vector machines and deep neural networks. This is not to be confused with interpretable AI, which involves models that are inherently interpretable and transparent such as general additive models (GAM), decision trees and rule-based models.\nSome would argue that we best avoid explaining black-box models altogether (Rudin 2019) and instead focus solely on interpretable AI. While I agree that initial efforts should always be geared towards interpretable models, stopping there would entail missed opportunities and anyway is probably not very realistic in times of DALL\\(\\cdot\\)E and Co.\nThis post introduces the main functionality of the new Julia package. Following a motivating example using a model trained in Julia, we will see how easy the package can be adapted to work with models trained in Python and R. Since the motivation for this post is also to hopefully attract contributors, the final section outlines some of the exciting developments we have planned."
  },
  {
    "objectID": "posts/a-new-tool-for-explainable-ai/index.html#counterfactuals-for-image-data",
    "href": "posts/a-new-tool-for-explainable-ai/index.html#counterfactuals-for-image-data",
    "title": "A new tool for explainable AI",
    "section": "Counterfactuals for image data 🖼",
    "text": "Counterfactuals for image data 🖼\nTo introduce counterfactual explanations I used a simple binary classification problem in my previous post. It involved a linear classifier and a linearly separable, synthetic data set with just two features. This time we are going to step it up a notch: we will generate counterfactual explanations MNIST data. The MNIST dataset contains 60,000 training samples of handwritten digits in the form of 28x28 pixel grey-scale images (LeCun 1998). Each image is associated with a label indicating the digit (0-9) that the image represents.\nThe CounterfactualExplanations.jl package ships with two black-box models that were trained to predict labels for this data: firstly, a simple multi-layer perceptron (MLP) and, secondly, a corresponding deep ensemble. Originally proposed by Lakshminarayanan, Pritzel, and Blundell (2016), deep ensembles are really just ensembles of deep neural networks. They are still among the most popular approaches to Bayesian deep learning.2\n\nBlack-box models\nThe code below loads relevant packages along with the MNIST data and pre-trained models.\n\nShow the code\n# Load package, models and data:\nusing CounterfactualExplanations, Flux\nusing CounterfactualExplanations.Data: mnist_data, mnist_model, mnist_ensemble\ndata, X, ys = mnist_data()\nmodel = mnist_model()\nensemble = mnist_ensemble()\ncounterfactual_data = CounterfactualData(X,ys;domain=(0,1))\n\nWhile the package can currently handle a few simple classification models natively, it is designed to be easily extensible through users and contributors. Extending the package to deal with custom models typically involves only two simple steps:\n\nSubtyping: the custom model needs to be declared as a subtype of the package-internal type AbstractFittedModel.\nMultiple dispatch: the package-internal functions logits and probs need to be extended through custom methods for the new model type.\n\nThe following code implements these two steps first for the MLP and then for the deep ensemble.\n\nShow the code\nusing CounterfactualExplanations.Models\nimport CounterfactualExplanations.Models: logits, probs\n# MLP:\n# Step 1)\nstruct NeuralNetwork <: Models.AbstractFittedModel\n    model::Any\nend\n# Step 2)\nlogits(M::NeuralNetwork, X::AbstractArray) = M.model(X)\nprobs(M::NeuralNetwork, X::AbstractArray)= softmax(logits(M, X))\nM = NeuralNetwork(model)\n\n# Deep ensemble:\nusing Flux: stack\n# Step 1)\nstruct FittedEnsemble <: Models.AbstractFittedModel\n    ensemble::AbstractArray\nend\n# Step 2)\nusing Statistics\nlogits(M::FittedEnsemble, X::AbstractArray) = mean(stack([m(X) for m in M.ensemble],3),dims=3)\nprobs(M::FittedEnsemble, X::AbstractArray) = mean(stack([softmax(m(X)) for m in M.ensemble],3),dims=3)\nM_ensemble = FittedEnsemble(ensemble)\n\n\n\nCounterfactual generators\nNext, we need to specify the counterfactual generators we want to use. The package currently ships with two default generators that both need gradient access: firstly, the generic generator introduced by Wachter, Mittelstadt, and Russell (2017) and, secondly, a greedy generator introduced by Schut et al. (2021).\nThe greedy generator is designed to be used with models that incorporate uncertainty in their predictions such as the deep ensemble introduced above. It works for probabilistic (Bayesian) models, because they only produce high-confidence predictions in regions of the feature domain that are populated by training samples. As long as the model is expressive enough and well-specified, counterfactuals in these regions will always be realistic and unambiguous since by construction they should look very similar to training samples. Other popular approaches to counterfactual explanations like REVISE (Joshi et al. 2019) and CLUE (Antorán et al. 2020) also play with this simple idea.\nThe following code instantiates the two generators for the problem at hand.\n\nShow the code\ngeneric = GenericGenerator(;loss=:logitcrossentropy)\ngreedy = GreedyGenerator(;loss=:logitcrossentropy)\n\n\n\nExplanations\nOnce the model and counterfactual generator are specified, running counterfactual search is very easy using the package. For a given factual (x), target class (target) and data set (counterfactual_data), simply running\ngenerate_counterfactual(x, target, counterfactual_data, M, generic)\nwill generate the results, in this case using the generic generator (generic) for the MLP (M). Since we have specified two different black-box models and two different counterfactual generators, we have four combinations of a model and a generator in total. For each of these combinations I have used the generate_counterfactual function to produce the results in Figure 1.\nIn every case the desired label switch is in fact achieved, but arguably from a human perspective only the counterfactuals for the deep ensemble look like a four. The generic generator produces mild perturbations in regions that seem irrelevant from a human perspective, but nonetheless yields a counterfactual that can pass as a four. The greedy approach clearly targets pixels at the top of the handwritten nine and yields the best result overall. For the non-Bayesian MLP, both the generic and the greedy approach generate counterfactuals that look much like adversarial examples: they perturb pixels in seemingly random regions on the image.\n\n\n\nFigure 1: Counterfactual explanations for MNIST: turning a nine (9) into a four (4)."
  },
  {
    "objectID": "posts/a-new-tool-for-explainable-ai/index.html#language-interoperability",
    "href": "posts/a-new-tool-for-explainable-ai/index.html#language-interoperability",
    "title": "A new tool for explainable AI",
    "section": "Language interoperability 👥",
    "text": "Language interoperability 👥\nThe Julia language offers unique support for programming language interoperability. For example, calling R or Python is made remarkably easy through RCall.jl and PyCall.jl, respectively. This functionality can be leveraged to use CounterfactualExplanations.jl to generate explanations for models that were developed in other programming languages. At this time there is no native support for foreign programming languages, but the following example involving a torch neural network trained in R demonstrates how versatile the package is.3\n\nExplaining a torch model\nWe will consider a simple MLP trained for a binary classification task. As before we first need to adapt this custom model for use with our package. The code below the two necessary steps - sub-typing and method extension. Logits are returned by the torch model and copied from the R environment into the Julia scope. Probabilities are then computed inside the Julia scope by passing the logits through the sigmoid function.\n\nShow the code\nusing Flux\nusing CounterfactualExplanations, CounterfactualExplanations.Models\nimport CounterfactualExplanations.Models: logits, probs # import functions in order to extend\n\n# Step 1)\nstruct TorchNetwork <: Models.AbstractFittedModel\n    nn::Any\nend\n\n# Step 2)\nfunction logits(M::TorchNetwork, X::AbstractArray)\n  nn = M.nn\n  y = rcopy(R\"as_array($nn(torch_tensor(t($X))))\")\n  y = isa(y, AbstractArray) ? y : [y]\n  return y'\nend\nfunction probs(M::TorchNetwork, X::AbstractArray)\n  return σ.(logits(M, X))\nend\nM = TorchNetwork(R\"model\")\n\nCompared to models trained in Julia, we need to do a little more work at this point. Since our counterfactual generators need gradient access, we essentially need to allow our package to communicate with the R torch library. While this may sound daunting, it turns out to be quite manageable: all we have to do is respecify the function that computes the gradient with respect to the counterfactual loss function so that it can deal with the TorchNetwork type we defined above. That is all the adjustment needed to use CounterfactualExplanations.jl for our custom R model. Figure 2 shows a counterfactual path for a randomly chosen sample with respect to the MLP trained in R.\n\n\n\n\n\n\nExperimental functionality\n\n\n\nYou may have stumbled across the term respecify above: does it really seem like a good idea to just replace an existing function from our package? Surely not! There are certainly better ways to go about this, which we will consider when adding native support for Python and R models in future package releases. Which brings us to our final section …\n\n\n\nShow the code\nimport CounterfactualExplanations.Generators: ∂ℓ\nusing LinearAlgebra\n\n# Countefactual loss:\nfunction ∂ℓ(\n    generator::AbstractGradientBasedGenerator, \n    counterfactual_state::CounterfactualState) \n  M = counterfactual_state.M\n  nn = M.nn\n  x′ = counterfactual_state.x′\n  t = counterfactual_state.target_encoded\n  R\"\"\"\n  x <- torch_tensor($x′, requires_grad=TRUE)\n  output <- $nn(x)\n  loss_fun <- nnf_binary_cross_entropy_with_logits\n  obj_loss <- loss_fun(output,$t)\n  obj_loss$backward()\n  \"\"\"\n  grad = rcopy(R\"as_array(x$grad)\")\n  return grad\nend\n\n\n\n\nFigure 2: Counterfactual path using the generic counterfactual generator for a model trained in R."
  },
  {
    "objectID": "posts/a-new-tool-for-explainable-ai/index.html#we-need-you",
    "href": "posts/a-new-tool-for-explainable-ai/index.html#we-need-you",
    "title": "A new tool for explainable AI",
    "section": "We need you! 🫵",
    "text": "We need you! 🫵\nThe ambition for CounterfactualExplanations.jl is to provide a go-to place for counterfactual explanations to the Julia community and beyond. This is a grand ambition, especially for a package that has so far been built by a single developer who has little prior experience with Julia. We would therefore very much like to invite community contributions. If you have an interest in trustworthy AI, the open-source community and Julia, please do get involved! This package is still in its early stages of development, so any kind of contribution is welcome: advice on the core package architecture, pull requests, issues, discussions and even just comments below would be much appreciated.\nTo give you a flavor of what type of future developments we envision, here is a non-exhaustive list:\n\nNative support for additional counterfactual generators and predictive models including those built and trained in Python or R.\nAdditional datasets for testing, evaluation and benchmarking.\nImproved preprocessing including native support for categorical features.\nSupport for regression models.\n\nFinally, if you like this project but don’t have much time, then simply sharing this article or starring the repo on GitHub would also go a long way."
  },
  {
    "objectID": "posts/a-new-tool-for-explainable-ai/index.html#further-reading",
    "href": "posts/a-new-tool-for-explainable-ai/index.html#further-reading",
    "title": "A new tool for explainable AI",
    "section": "Further reading 📚",
    "text": "Further reading 📚\nIf you’re interested in learning more about this development, feel free to check out the following resources:\n\nPackage docs: [stable], [dev].\nContributor’s guide.\nGitHub repo."
  },
  {
    "objectID": "posts/bayesian-logit/index.html#uncertainty",
    "href": "posts/bayesian-logit/index.html#uncertainty",
    "title": "Bayesian Logistic Regression",
    "section": "Uncertainty",
    "text": "Uncertainty\n\n\n\n\nSimulation of changing parameter distribution.\n\n\n\nIf you’ve ever searched for evaluation metrics to assess model accuracy, chances are that you found many different options to choose from (too many?). Accuracy is in some sense the holy grail of prediction so it’s not at all surprising that the machine learning community spends a lot time thinking about it. In a world where more and more high-stake decisions are being automated, model accuracy is in fact a very valid concern.\nBut does this recipe for model evaluation seem like a sound and complete approach to automated decision-making? Haven’t we forgot anything? Some would argue that we need to pay more attention to model uncertainty. No matter how many times you have cross-validated your model, the loss metric that it is being optimized against as well as its parameters and predictions remain inherently random variables. Focusing merely on prediction accuracy and ignoring uncertainty altogether can install a false level of confidence in automated decision-making systems. Any trustworthy approach to learning from data should therefore at the very least be transparent about its own uncertainty.\nHow can we estimate uncertainty around model parameters and predictions? Frequentist methods for uncertainty quantification generally involve either closed-form solutions based on asymptotic theory or bootstrapping (see for example here for the case of logistic regression). In Bayesian statistics and machine learning we are instead concerned with modelling the posterior distribution over model parameters. This approach to uncertainty quantification is known as Bayesian Inference because we treat model parameters in a Bayesian way: we make assumptions about their distribution based on prior knowledge or beliefs and update these beliefs in light of new evidence. The frequentist approach avoids the need for being explicit about prior beliefs, which in the past has sometimes been considered as unscientific. However, frequentist methods come with their own assumptions and pitfalls (see for example Murphy (2012)) for a discussion). Without diving further into this argument, let us now see how Bayesian Logistic Regression can be implemented from the bottom up."
  },
  {
    "objectID": "posts/bayesian-logit/index.html#the-ground-truth",
    "href": "posts/bayesian-logit/index.html#the-ground-truth",
    "title": "Bayesian Logistic Regression",
    "section": "The ground truth",
    "text": "The ground truth\n\n\n\nIn this post we will work with a synthetic toy data set \\(\\mathcal{D}\\) composed of \\(N\\) binary labels \\(y_n\\in\\{0,1\\}\\) and corresponding feature vectors \\(\\mathbf{x}_n\\in \\mathbb{R}^D\\). Working with synthetic data has the benefit that we have control over the ground truth that generates our data. In particular, we will assume that the binary labels \\(y_n\\) are generated by a logistic regression model\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& p(y_n|\\mathbf{x}_n;\\mathbf{w})&\\sim\\text{Ber}(y_n|\\sigma(\\mathbf{w}^T\\mathbf{x}_n)) \\\\\n\\end{aligned}\n\\end{equation}\n\\tag{1}\\]\nwhere \\(\\sigma(a)=1/(1+e^{-a})\\) is the sigmoid or logit function (Murphy 2022).1 Features are generated from a mixed Gaussian model.\nTo add a little bit of life to our example we will assume that the binary labels classify samples into cats and dogs, based on their height and tail length. Figure 1 shows the synthetic data in the two-dimensional feature domain. Following an introduction to Bayesian Logistic Regression in the next section we will use the synthetic data \\(\\mathcal{D}\\) to estimate our model.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1: Ground truth labels."
  },
  {
    "objectID": "posts/bayesian-logit/index.html#the-maths",
    "href": "posts/bayesian-logit/index.html#the-maths",
    "title": "Bayesian Logistic Regression",
    "section": "The maths",
    "text": "The maths\nEstimation usually boils down to finding the vector of parameters \\(\\hat{\\mathbf{w}}\\) that maximizes the likelihood of observing \\(\\mathcal{D}\\) under the assumed model. That estimate can then be used to compute predictions for some new unlabelled data set \\(\\mathcal{D}=\\{x_m:m=1,...,M\\}\\).\n\nProblem setup\nThe starting point for Bayesian Logistic Regression is Bayes’ Theorem:\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& p(\\mathbf{w}|\\mathcal{D})&\\propto p(\\mathcal{D}|\\mathbf{w})p(\\mathbf{w}) \\\\\n\\end{aligned}\n\\end{equation}\n\\tag{2}\\]\nFormally, this says that the posterior distribution of parameters \\(\\mathbf{w}\\) is proportional to the product of the likelihood of observing \\(\\mathcal{D}\\) given \\(\\mathbf{w}\\) and the prior density of \\(\\mathbf{w}\\). Applied to our context this can intuitively be understood as follows: our posterior beliefs around \\(\\mathbf{w}\\) are formed by both our prior beliefs and the evidence we observe. Yet another way to look at this is that maximising Equation 2 with respect to \\(\\mathbf{w}\\) corresponds to maximum likelihood estimation regularized by prior beliefs (we will come back to this).\nUnder the assumption that individual label-feature pairs are independently and identically distributed, their joint likelihood is simply the product over their individual densities. The prior beliefs around \\(\\mathbf{w}\\) are at our discretion. In practice they may be derived from previous experiments. Here we will use a zero-mean spherical Gaussian prior for reasons explained further below. To sum this up we have\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& p(\\mathcal{D}|\\mathbf{w})& \\sim \\prod_{n=1}^N p(y_n|\\mathbf{x}_n;\\mathbf{w})\\\\\n&& p(\\mathbf{w})& \\sim \\mathcal{N} \\left( \\mathbf{w} | \\mathbf{w}_0, \\Sigma_0 \\right) \\\\\n\\end{aligned}\n\\end{equation}\n\\tag{3}\\]\nwith \\(\\mathbf{w}_0=\\mathbf{0}\\) and \\(\\Sigma_0=\\sigma^2\\mathbf{I}\\). Plugging this into Bayes’ rule we finally have\n\\[\n\\begin{aligned}\n&& p(\\mathbf{w}|\\mathcal{D})&\\propto\\prod_{n=1}^N \\text{Ber}(y_n|\\sigma(\\mathbf{w}^T\\mathbf{x}_n))\\mathcal{N} \\left( \\mathbf{w} | \\mathbf{w}_0, \\Sigma_0 \\right) \\\\\n\\end{aligned}\n\\]\nUnlike with linear regression there are no closed-form analytical solutions to estimating or maximising this posterior, but fortunately accurate approximations do exist (Murphy 2022). One of the simplest approaches called Laplace Approximation is straight-forward to implement and computationally very efficient. It relies on the observation that under the assumption of a Gaussian prior, the posterior of logistic regression is also approximately Gaussian: in particular, this Gaussian distribution is centered around the maximum a posteriori (MAP) estimate \\(\\hat{\\mathbf{w}}=\\arg\\max_{\\mathbf{w}} p(\\mathbf{w}|\\mathcal{D})\\) with a covariance matrix equal to the inverse Hessian evaluated at the mode \\(\\hat{\\Sigma}=(\\mathbf{H}(\\hat{\\mathbf{w}}))^{-1}\\). With that in mind, finding \\(\\hat{\\mathbf{w}}\\) seems like a natural next step.\n\n\nSolving the problem\nIn practice we do not maximize the posterior \\(p(\\mathbf{w}|\\mathcal{D})\\) directly. Instead we minimize the negative log likelihood, which is an equivalent optimization problem and easier to implement. In Equation 4 below I have denoted the negative log likelihood as \\(\\ell(\\mathbf{w})\\) indicating that this is the loss function we aim to minimize. The following two lines in Equation 4 show the gradient and Hessian - so the first- and second-order derivatives of \\(\\ell\\) with respect to \\(\\mathbf{w}\\) - where \\(\\mathbf{H}_0=\\Sigma_0^{-1}\\) and \\(\\mu_n=\\sigma(\\mathbf{w}^T\\mathbf{x}_n)\\). To understand how exactly the gradient and Hessian are derived see for example chapter 10 in Murphy (2022).2.\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& \\ell(\\mathbf{w})&=- \\sum_{n=1}^{N} [y_n \\log \\mu_n + (1-y_n)\\log (1-\\mu_n)] + \\frac{1}{2} (\\mathbf{w}-\\mathbf{w}_0)^T\\mathbf{H}_0(\\mathbf{w}-\\mathbf{w}_0) \\\\\n&& \\nabla_{\\mathbf{w}}\\ell(\\mathbf{w})&= \\sum_{n=1}^{N} (\\mu_n-y_n) \\mathbf{x}_n + \\mathbf{H}_0(\\mathbf{w}-\\mathbf{w}_0) \\\\\n&& \\nabla^2_{\\mathbf{w}}\\ell(\\mathbf{w})&= \\sum_{n=1}^{N} (\\mu_n-y_n) \\left( \\mu_n(1-\\mu_n) \\mathbf{x}_n \\mathbf{x}_n^T \\right) + \\mathbf{H}_0\\\\\n\\end{aligned}\n\\end{equation}\n\\tag{4}\\]\n\nSIDENOTE 💡\nNote how earlier I mentioned that maximising the posterior likelihood can be seen as regularized maximum likelihood estimation. We can now make that connection explicit: in Equation 4 let us assume that \\(\\mathbf{w}_0=\\mathbf{0}\\). Then since \\(\\mathbf{H}_0=\\lambda\\mathbf{I}\\) with \\(1/\\sigma^2\\) the second term in the first line is simply \\(\\lambda \\frac{1}{2} \\mathbf{w}^T\\mathbf{w}=\\lambda \\frac{1}{2} ||\\mathbf{w}||_2^2\\). This is equivalent to running logistic regression with an \\(\\ell_2\\)-penalty (Bishop 2006).\n\n\nSince minimizing the loss function in Equation 4 is a convex optimization problem we have many efficient algorithms to choose from in order to solve this problem. With the Hessian at hand it seems natural to use a second-order method, because incorporating information about the curvature of the loss function generally leads to faster convergence. Here we will implement Newton’s method in line with the presentation in chapter 8 of Murphy (2022).\n\n\nPosterior predictive\nSuppose now that we have trained the Bayesian Logistic Regression model as our binary classifier \\(g_N(\\mathbf{x})\\) using our training data \\(\\mathcal{D}\\). A new unlabelled sample \\((\\mathbf{x}_{N+1},?)\\) arrives. As with any binary classifier we can predict the missing label by simply plugging the new sample into our classifier \\(\\hat{y}_{N+1}=g_N(\\mathbf{x}_{N+1})=\\sigma(\\hat{\\mathbf{w}}^T\\mathbf{x}_{N+1})\\), where \\(\\hat{\\mathbf{w}}\\) is the MAP estimate as before. If at training phase we have found \\(g_N(\\mathbf{x})\\) to achieve good accuracy, we may expect \\((\\mathbf{x}_{N+1},\\hat{y}_{N+1})\\) to be a reasonably good approximation of the true and unobserved pair \\((\\mathbf{x}_{N+1},y_{N+1})\\). But since we are still dealing with an expected value of a random variable, we would generally like to have an idea of how noisy this prediction is.\nFormally, we are interested in the posterior predictive distribution:\n\\[\n\\begin{equation}\n\\begin{aligned}\n&& p(y=1|\\mathbf{x}, \\mathcal{D})&= \\int \\sigma(\\mathbf{w}^T \\mathbf{x})p(\\mathbf{w}|\\mathcal{D})d\\mathbf{w} \\\\\n\\end{aligned}\n\\end{equation}\n\\tag{5}\\]\n\nSIDENOTE 💡\nThe approach that ignores uncertainty altogether corresponds to what is referred to as plugin approximation of the posterior predictive. Formally, it imposes \\(p(y=1|\\mathbf{x}, \\mathcal{D})\\approx p(y=1|\\mathbf{x}, \\hat{\\mathbf{w}})\\).\n\n\nWith the posterior distribution over model parameters \\(p(\\mathbf{w}|\\mathcal{D})\\) at hand we have the necessary ingredients to estimate the posterior predictive distribution \\(p(y=1|\\mathbf{x}, \\mathcal{D})\\).\nAn obvious, but computationally expensive way to estimate it is through Monte Carlo: draw \\(\\mathbf{w}_s\\) from \\(p(\\mathbf{w}|\\mathcal{D})\\) for \\(s=1:S\\) and compute fitted values \\(\\sigma(\\mathbf{w_s}^T\\mathbf{x})\\) each. Then the posterior predictive distribution corresponds to the average over all fitted values, \\(p(y=1|\\mathbf{x}, \\mathcal{D})=1/S \\sum_{s=1}^{S}\\sigma(\\mathbf{w_s}^T\\mathbf{x})\\). By the law of large numbers the Monte Carlo estimate is an accurate estimate of the true posterior predictive for large enough \\(S\\). Of course, “large enough” is somewhat loosely defined here and depending on the problem can mean “very large”. Consequently, the computational costs involved essentially know no upper bound.\nFortunately, it turns out that we can trade off a little bit of accuracy in return for a convenient analytical solution. In particular, we have that \\(\\sigma(a) \\approx \\Phi(\\lambda a)\\) where \\(\\Phi(.)\\) is the standard Gaussian cdf and \\(\\lambda=\\pi/8\\) ensures that the two functions have the same slope at the origin (Figure 2). Without dwelling further on the details we can use this finding to approximate the integral in Equation 5 as a sigmoid function. This is called probit approximation and implemented below.\n\n\n\n\n\nFigure 2: Demonstration of the probit approximation."
  },
  {
    "objectID": "posts/bayesian-logit/index.html#the-code",
    "href": "posts/bayesian-logit/index.html#the-code",
    "title": "Bayesian Logistic Regression",
    "section": "The code",
    "text": "The code\nWe now have all the necessary ingredients to code Bayesian Logistic Regression up from scratch. While in practice we would usually want to rely on existing packages that have been properly tested, I often find it very educative and rewarding to program algorithms from the bottom up. You will see that Julia’s syntax so closely resembles the mathematical formulas we have seen above, that going from maths to code is incredibly easy. Seeing those formulas and algorithms then actually doing their magic is quite fun! The code chunk below, for example, shows the implementation of the loss function and its derivatives from Equation 4 above. Take a moment to go through the code line-by-line and try to understand how it relates back to the equations in Equation 4. Isn’t it amazing how closely the code resembles the actual equations?\n\nAside from the optimization routine this is essentially all there is to coding up Bayesian Logistic Regression from scratch in Julia Language. If you are curious to see the full source code in detail you can check out this interactive notebook. Now let us finally turn back to our synthetic data and see how Bayesian Logistic Regression can help us understand the uncertainty around our model predictions.\n\nDISCLAIMER ❗️\nI should mention that this is the first time I program in Julia, so for any Julia pros out there: please bear with me! Happy to hear your suggestions/comments."
  },
  {
    "objectID": "posts/bayesian-logit/index.html#the-estimates",
    "href": "posts/bayesian-logit/index.html#the-estimates",
    "title": "Bayesian Logistic Regression",
    "section": "The estimates",
    "text": "The estimates\nFigure 3 below shows the resulting posterior distribution for \\(w_2\\) and \\(w_3\\) at varying degrees of prior uncertainty \\(\\sigma\\). The constant \\(w_1\\) is held constant at the mode (\\(\\hat{w}_1\\)). The red dot indicates the MLE. Note how for the choice of \\(\\sigma\\rightarrow 0\\) the posterior is equal to the prior. This is intuitive since we have imposed that we have no uncertainty around our prior beliefs and hence no amount of new evidence can move us in any direction. Conversely, for \\(\\sigma \\rightarrow \\infty\\) the posterior distribution is centered around the unconstrained MLE: prior knowledge is very uncertain and hence the posterior is dominated by the likelihood of the data.\n\n\n\n\n\nFigure 3: Posterior distribution for \\(w_2\\) and \\(w_3\\) at varying degrees of prior uncertainty \\(\\sigma\\).\n\n\n\n\nWhat about the posterior predictive? The story is similar: since for \\(\\sigma\\rightarrow 0\\) the posterior is completely dominated by the zero-mean prior we have \\(p(y=1|\\mathbf{x},\\hat{\\mathbf{w}})=0.5\\) everywhere (top left panel in Figure 4. As we gradually increase uncertainty around our prior the predictive posterior depends more and more on the data \\(\\mathcal{D}\\): uncertainty around predicted labels is high only in regions that are not populated by samples \\((y_n, \\mathbf{x}_n)\\). Not surprisingly, this effect is strongest for the MLE (\\(\\sigma\\rightarrow \\infty\\)) where we see some evidence of overfitting.\n\n\n\n\n\nFigure 4: Predictive posterior distribution at varying degrees of prior uncertainty \\(\\sigma\\)."
  },
  {
    "objectID": "posts/bayesian-logit/index.html#wrapping-up",
    "href": "posts/bayesian-logit/index.html#wrapping-up",
    "title": "Bayesian Logistic Regression",
    "section": "Wrapping up",
    "text": "Wrapping up\nIn this post we have seen how Bayesian Logistic Regression can be implemented from scratch in Julia language. The estimated posterior distribution over model parameters can be used to quantify uncertainty around coefficients and model predictions. I have argued that it is important to be transparent about model uncertainty to avoid being overly confident in estimates.\nThere are many more benefits associated with Bayesian (probabilistic) machine learning. Understanding where in the input domain our model exerts high uncertainty can for example be instrumental in labelling data: see for example Gal, Islam, and Ghahramani (2017) and follow-up works for an interesting application to active learning for image data. Similarly, there is a recent work that uses estimates of the posterior predictive in the context of algorithmic recourse (Schut et al. 2021). For a brief introduction to algorithmic recourse see one of my previous posts.\nAs a great reference for further reading about probabilistic machine learning I can highly recommend Murphy (2022). An electronic version of the book is currently freely available as a draft. Finally, remember that if you want to try yourself at the code, you can check out this interactive notebook."
  },
  {
    "objectID": "posts/bayesian-logit/index.html#references",
    "href": "posts/bayesian-logit/index.html#references",
    "title": "Bayesian Logistic Regression",
    "section": "References",
    "text": "References\n\n\nBishop, Christopher M. 2006. Pattern Recognition and Machine Learning. springer.\n\n\nGal, Yarin, Riashat Islam, and Zoubin Ghahramani. 2017. “Deep Bayesian Active Learning with Image Data.” In International Conference on Machine Learning, 1183–92. PMLR.\n\n\nMurphy, Kevin P. 2012. Machine Learning: A Probabilistic Perspective. MIT press.\n\n\n———. 2022. Probabilistic Machine Learning: An Introduction. MIT Press.\n\n\nSchut, Lisa, Oscar Key, Rory Mc Grath, Luca Costabello, Bogdan Sacaleanu, Yarin Gal, et al. 2021. “Generating Interpretable Counterfactual Explanations by Implicit Minimisation of Epistemic and Aleatoric Uncertainties.” In International Conference on Artificial Intelligence and Statistics, 1756–64. PMLR."
  },
  {
    "objectID": "posts/effortsless-bayesian-dl/index.html",
    "href": "posts/effortsless-bayesian-dl/index.html",
    "title": "Go deep, but also … go Bayesian!",
    "section": "",
    "text": "A Bayesian Neural Network gradually learns.\nDeep learning has dominated AI research in recent years1 - but how much promise does it really hold? That is very much an ongoing and increasingly polarising debate that you can follow live on Twitter. On one side you have optimists like Ilya Sutskever, chief scientist of OpenAI, who believes that large deep neural networks may already be slightly conscious - that’s “may” and “slightly” and only if you just go deep enough? On the other side you have prominent skeptics like Judea Pearl who has long since argued that deep learning still boils down to curve fitting - purely associational and not even remotely intelligent (Pearl and Mackenzie 2018)."
  },
  {
    "objectID": "posts/effortsless-bayesian-dl/index.html#the-case-for-bayesian-deep-learning",
    "href": "posts/effortsless-bayesian-dl/index.html#the-case-for-bayesian-deep-learning",
    "title": "Go deep, but also … go Bayesian!",
    "section": "The case for Bayesian Deep Learning",
    "text": "The case for Bayesian Deep Learning\nWhatever side of this entertaining twitter dispute you find yourself on, the reality is that deep-learning systems have already been deployed at large scale both in academia and industry. More pressing debates therefore revolve around the trustworthiness of these existing systems. How robust are they and in what way exactly do they arrive at decisions that affect each and every one of us? Robustifying deep neural networks generally involves some form of adversarial training, which is costly, can hurt generalization (Raghunathan et al. 2019) and does ultimately not guarantee stability (Bastounis, Hansen, and Vlačić 2021). With respect to interpretability, surrogate explainers like LIME and SHAP are among the most popular tools, but they too have been shown to lack robustness (Slack et al. 2020).\nExactly why are deep neural networks unstable and in-transparent? Let \\(\\mathcal{D}=\\{x,y\\}_{n=1}^N\\) denote our feature-label pairs and let \\(f(x;\\theta)=y\\) denote some deep neural network specified by its parameters \\(\\theta\\). Then the first thing to note is that the number of free parameters \\(\\theta\\) is typically huge (if you ask Mr Sutskever it really probably cannot be huge enough!). That alone makes it very hard to monitor and interpret the inner workings of deep-learning algorithms. Perhaps more importantly though, the number of parameters relative to the size of \\(\\mathcal{D}\\) is generally huge:\n\n[…] deep neural networks are typically very underspecified by the available data, and […] parameters [therefore] correspond to a diverse variety of compelling explanations for the data. (Wilson 2020)\n\nIn other words, training a single deep neural network may (and usually does) lead to one random parameter specification that fits the underlying data very well. But in all likelihood there are many other specifications that also fit the data very well. This is both a strength and vulnerability of deep learning: it is a strength because it typically allows us to find one such “compelling explanation” for the data with ease through stochastic optimization; it is a vulnerability because one has to wonder:\n\nHow compelling is an explanation really if it competes with many other equally compelling, but potentially very different explanations?\n\nA scenario like this very much calls for treating predictions from deep learning models probabilistically [Wilson (2020)]23.\nFormally, we are interested in estimating the posterior predictive distribution as the following Bayesian model average (BMA):\n\\[\np(y|x,\\mathcal{D}) = \\int p(y|x,\\theta)p(\\theta|\\mathcal{D})d\\theta\n\\]\nThe integral implies that we essentially need many predictions from many different specifications of \\(\\theta\\). Unfortunately, this means more work for us or rather our computers. Fortunately though, researchers have proposed many ingenious ways to approximate the equation above in recent years: Gal and Ghahramani (2016) propose using dropout at test time while Lakshminarayanan, Pritzel, and Blundell (2016) show that averaging over an ensemble of just five models seems to do the trick. Still, despite their simplicity and usefulness these approaches involve additional computational costs compared to training just a single network. As we shall see now though, another promising approach has recently entered the limelight: Laplace approximation (LA).\nIf you have read my previous post on Bayesian Logistic Regression, then the term Laplace should already sound familiar to you. As a matter of fact, we will see that all concepts covered in that previous post can be naturally extended to deep learning. While some of these concepts will be revisited below, I strongly recommend you check out the previous post before reading on here. Without further ado let us now see how LA can be used for truly effortless deep learning."
  },
  {
    "objectID": "posts/effortsless-bayesian-dl/index.html#laplace-approximation",
    "href": "posts/effortsless-bayesian-dl/index.html#laplace-approximation",
    "title": "Go deep, but also … go Bayesian!",
    "section": "Laplace Approximation",
    "text": "Laplace Approximation\nWhile LA was first proposed in the 18th century, it has so far not attracted serious attention from the deep learning community largely because it involves a possibly large Hessian computation. Daxberger et al. (2021) are on a mission to change the perception that LA has no use in DL: in their NeurIPS 2021 paper they demonstrate empirically that LA can be used to produce Bayesian model averages that are at least at par with existing approaches in terms of uncertainty quantification and out-of-distribution detection and significantly cheaper to compute. They show that recent advancements in autodifferentation can be leveraged to produce fast and accurate approximations of the Hessian and even provide a fully-fledged Python library that can be used with any pretrained Torch model. For this post, I have built a much less comprehensive, pure-play equivalent of their package in Julia - BayesLaplace.jl can be used with deep learning models built in Flux.jl, which is Julia’s main DL library. As in the previous post on Bayesian logistic regression I will rely on Julia code snippits instead of equations to convey the underlying maths. If you’re curious about the maths, the NeurIPS 2021 paper provides all the detail you need.\n\nFrom Bayesian Logistic Regression …\nLet’s recap: in the case of logistic regression we had a assumed a zero-mean Gaussian prior \\(p(\\mathbf{w}) \\sim \\mathcal{N} \\left( \\mathbf{w} | \\mathbf{0}, \\sigma_0^2 \\mathbf{I} \\right)=\\mathcal{N} \\left( \\mathbf{w} | \\mathbf{0}, \\mathbf{H}_0^{-1} \\right)\\) for the weights that are used to compute logits \\(\\mu_n=\\mathbf{w}^T\\mathbf{x}_n\\), which in turn are fed to a sigmoid function to produce probabilities \\(p(y_n=1)=\\sigma(\\mu_n)\\). We saw that under this assumption solving the logistic regression problem corresponds to minimizing the following differentiable loss function:\n\\[\n\\ell(\\mathbf{w})= - \\sum_{n}^N [y_n \\log \\mu_n + (1-y_n)\\log (1-\\mu_n)] + \\\\ \\frac{1}{2} (\\mathbf{w}-\\mathbf{w}_0)^T\\mathbf{H}_0(\\mathbf{w}-\\mathbf{w}_0)\n\\]\nAs our first step towards Bayesian deep learning, we observe the following: the loss function above corresponds to the objective faced by a single-layer artificial neural network with sigmoid activation and weight decay4. In other words, regularized logistic regression is equivalent to a very simple neural network architecture and hence it is not surprising that underlying concepts can in theory be applied in much the same way.\nSo let’s quickly recap the next core concept: LA relies on the fact that the second-order Taylor expansion of our loss function \\(\\ell\\) evaluated at the maximum a posteriori (MAP) estimate \\(\\mathbf{\\hat{w}}=\\arg\\max_{\\mathbf{w}} p(\\mathbf{w}|\\mathcal{D})\\) amounts to a multi-variate Gaussian distribution. In particular, that Gaussian is centered around the MAP estimate with covariance equal to the inverse Hessian evaluated at the mode \\(\\hat{\\Sigma}=(\\mathbf{H}(\\mathbf{\\hat{w}}))^{-1}\\) (Murphy 2022).\nThat is basically all there is to the story: if we have a good estimate of \\(\\mathbf{H}(\\mathbf{\\hat{w}})\\) we have an analytical expression for an (approximate) posterior over parameters. So let’s go ahead and start by run Bayesian Logistic regression using Flux.jl. We begin by loading some required packages including BayesLaplace.jl. It ships with a helper function toy_data_linear that creates a toy data set composed of linearly separable samples evenly balanced across the two classes.\n\n\nShow the code\n# Import libraries.\nusing Flux, Plots, Random, PlotThemes, Statistics, BayesLaplace\ntheme(:wong)\n# Number of points to generate.\nxs, y = toy_data_linear(100)\nX = hcat(xs...); # bring into tabular format\ndata = zip(xs,y);\n\n\nThen we proceed to prepare the single-layer neural network with weight decay. The term \\(\\lambda\\) determines the strength of the \\(\\ell2\\) penalty: we regularize parameters \\(\\theta\\) more heavily for higher values. Equivalently, we can say that from the Bayesian perspective it governs the strength of the prior \\(p(\\theta) \\sim \\mathcal{N} \\left( \\theta | \\mathbf{0}, \\sigma_0^2 \\mathbf{I} \\right)= \\mathcal{N} \\left( \\mathbf{w} | \\mathbf{0}, \\lambda_0^{-2} \\mathbf{I} \\right)\\): a higher value of \\(\\lambda\\) indicates a higher conviction about our prior belief that \\(\\theta=\\mathbf{0}\\), which is of course equivalent to regularizing more heavily. The exact choice of \\(\\lambda=0.5\\) for this toy example is somewhat arbitrary (it made for good visualizations below). Note that I have used \\(\\theta\\) to denote our neural parameters to distinguish the case from Bayesian logistic regression, but we are in fact still solving the same problem.\n\n\nShow the code\nnn = Chain(Dense(2,1))\nλ = 0.5\nsqnorm(x) = sum(abs2, x)\nweight_regularization(λ=λ) = 1/2 * λ^2 * sum(sqnorm, Flux.params(nn))\nloss(x, y) = Flux.Losses.logitbinarycrossentropy(nn(x), y) + weight_regularization();\n\n\nBefore we apply Laplace approximation we train our model:\n\n\nShow the code\nusing Flux.Optimise: update!, ADAM\nopt = ADAM()\nepochs = 50\n\nfor epoch = 1:epochs\n  for d in data\n    gs = gradient(params(nn)) do\n      l = loss(d...)\n    end\n    update!(opt, params(nn), gs)\n  end\nend\n\n\nUp until this point we have just followed the standard recipe for training a regularized artificial neural network in Flux.jl for a simple binary classification task. To compute the Laplace approximation using BayesLaplace.jl we need just two more lines of code:\n\n\nShow the code\nla = laplace(nn, λ=λ)\nfit!(la, data);\n\n\nUnder the hood the Hessian is approximated through the empirical Fisher, which can be computed using only the gradients of our loss function \\(\\nabla_{\\theta}\\ell(f(\\mathbf{x}_n;\\theta,y_n))\\) where \\(\\{\\mathbf{x}_n,y_n\\}\\) are training data (see NeurIPS 2021 paper for details). Finally, BayesLaplace.jl ships with a function predict(𝑳::LaplaceRedux, X::AbstractArray; link_approx=:probit) that computes the posterior predictive using a probit approximation, much like we saw in the previous post. That function is used under the hood of the plot_contour function below to create the right panel of Figure 1. It visualizes the posterior predictive distribution in the 2D feature space. For comparison I have added the corresponding plugin estimate as well. Note how for the Laplace approximation the predicted probabilities fan out indicating that confidence decreases in regions scarce of data.\n\n\nShow the code\np_plugin = plot_contour(X',y,la;title=\"Plugin\",type=:plugin);\np_laplace = plot_contour(X',y,la;title=\"Laplace\")\n# Plot the posterior distribution with a contour plot.\nplt = plot(p_plugin, p_laplace, layout=(1,2), size=(1000,400))\nsavefig(plt, \"www/posterior_predictive_logit.png\");\n\n\n\n\n\nFigure 1: Posterior predictive distribution of Logistic regression in the 2D feature space using plugin estimator (left) and Laplace approximation (right).\n\n\n\n\n… to Bayesian Neural Networks\nNow let’s step it up a notch: we will repeat the exercise from above, but this time for data that is not linearly separable using a simple MLP instead of the single-layer neural network we used above. The code below is almost the same as above, so I will not go through the various steps again.\n\n\nShow the code\n# Number of points to generate:\nxs, y = toy_data_non_linear(200)\nX = hcat(xs...); # bring into tabular format\ndata = zip(xs,y)\n\n# Build MLP:\nn_hidden = 32\nD = size(X)[1]\nnn = Chain(\n    Dense(D, n_hidden, σ),\n    Dense(n_hidden, 1)\n)  \nλ = 0.01\nsqnorm(x) = sum(abs2, x)\nweight_regularization(λ=λ) = 1/2 * λ^2 * sum(sqnorm, Flux.params(nn))\nloss(x, y) = Flux.Losses.logitbinarycrossentropy(nn(x), y) + weight_regularization()\n\n# Training:\nepochs = 200\nfor epoch = 1:epochs\n  for d in data\n    gs = gradient(params(nn)) do\n      l = loss(d...)\n    end\n    update!(opt, params(nn), gs)\n  end\nend\n\n\nFitting the Laplace approximation is also analogous, but note that this we have added an argument: subset_of_weights=:last_layer. This specifies that we only want to use the parameters of the last layer of our MLP. While we could have used all of them (subset_of_weights=:all), Daxberger et al. (2021) find that the last-layer Laplace approximation produces satisfying results, while be computationally cheaper. Figure 2 demonstrates that once again the Laplace approximation yields a posterior predictive distribution that is more conservative than the over-confident plugin estimate.\n\n\nShow the code\nla = laplace(nn, λ=λ, subset_of_weights=:last_layer)\nfit!(la, data);\np_plugin = plot_contour(X',y,la;title=\"Plugin\",type=:plugin)\np_laplace = plot_contour(X',y,la;title=\"Laplace\")\n# Plot the posterior distribution with a contour plot.\nplt = plot(p_plugin, p_laplace, layout=(1,2), size=(1000,400))\nsavefig(plt, \"www/posterior_predictive_mlp.png\");\n\n\n\n\n\nFigure 2: Posterior predictive distribution of MLP in the 2D feature space using plugin estimator (left) and Laplace approximation (right).\n\n\nTo see why this is a desirable outcome consider the zoomed out version of Figure 2 below: the plugin estimator classifies with full confidence in regions completely scarce of any data. Arguably Laplace approximation produces a much more reasonable picture, even though it too could likely be improved by fine-tuning our choice of \\(\\lambda\\) and the neural network architecture.\n\n\nShow the code\nzoom=-50\np_plugin = plot_contour(X',y,la;title=\"Plugin\",type=:plugin,zoom=zoom);\np_laplace = plot_contour(X',y,la;title=\"Laplace\",zoom=zoom);\n# Plot the posterior distribution with a contour plot.\nplt = plot(p_plugin, p_laplace, layout=(1,2), size=(1000,400));\nsavefig(plt, \"www/posterior_predictive_mlp_zoom.png\");\n\n\n\n\n\nFigure 3: Posterior predictive distribution of MLP in the 2D feature space using plugin estimator (left) and Laplace approximation (right). Zoomed out."
  },
  {
    "objectID": "posts/effortsless-bayesian-dl/index.html#wrapping-up",
    "href": "posts/effortsless-bayesian-dl/index.html#wrapping-up",
    "title": "Go deep, but also … go Bayesian!",
    "section": "Wrapping up",
    "text": "Wrapping up\nRecent state-of-the-art research on neural information processing suggests that Bayesian deep learning can be effortless: Laplace approximation for deep neural networks appears to work very well and it does so at minimal computational cost (Daxberger et al. 2021). This is great news, because the case for turning Bayesian is strong: society increasingly relies on complex automated decision-making systems that need to be trustworthy. More and more of these systems involve deep learning which in and of itself is not trustworthy. We have seen that typically there exist various viable parameterizations of deep neural networks each with their own distinct and compelling explanation for the data at hand. When faced with many viable options, don’t put all of your eggs in one basket. In other words, go Bayesian!"
  },
  {
    "objectID": "posts/effortsless-bayesian-dl/index.html#resources",
    "href": "posts/effortsless-bayesian-dl/index.html#resources",
    "title": "Go deep, but also … go Bayesian!",
    "section": "Resources",
    "text": "Resources\nTo get started with Bayesian deep learning I have found many useful and free resources online, some of which are listed below:\n\nTuring.jl tutorial on Bayesian deep learning in Julia.\nVarious RStudio AI blog posts including this one and this one.\nTensorFlow blog post on regression with probabilistic layers.\nKevin Murphy’s draft text book, now also available as print."
  },
  {
    "objectID": "posts/julia-and-quarto-a-match-made-in-heaven/index.html",
    "href": "posts/julia-and-quarto-a-match-made-in-heaven/index.html",
    "title": "Julia and Quarto: a match made in heaven? 🌤",
    "section": "",
    "text": "Julia and Quarto: a perfect match.\nDoes your work involve research, coding, writing and publishing? If so, then chances are that you often find yourself bouncing back and forth between different open-source text editors, IDEs, programming languages and platforms depending on your current needs. Using a diverse set of tools is reasonable, because there typically is no single perfect approach that solves all our problems. For example, interactive notebooks like Jupyter are useful for working with code and communicating it to others, but they are probably not anyone’s first choice for producing a scientific article. Similarly, Beamer presentations can be useful for presenting science in a standardized fashion, but they are the very opposite of interactive and look incredibly boring.\nAs much as the great variety of free tools deserves being celebrated, all this bouncing back and forth can be really tiring. What if there was a single tool, an engine that can turn your work into all kinds of different outputs? I mean literally any output you can think of: Markdown, HTML, PDF, LateX, ePub, entire websites, presentations (yes, also Beamer if you have to), MS Word, OpenOffice, … the list goes on. All of that starting from the same place: a plain Markdown document blended with essentially any programming language of your choice and a YAML header defining your output. This tool now exists and it goes by the name Quarto.\nIn this short blog post I hope to convince you that Quarto is the only publishing engine you will ever need. What I am definitely not going to tell you is which IDE, text editor or programming language you should be using to actually produce your work. Quarto does not care about that. Quarto is here to make your life a bit easier (and by ‘a bit’ I mean a whole lot). Quarto is nothing less but a revolution for scientific publishing.\nTo put this all in some context (well, my context), I will now tell you a bit about what has led me to making such bold claims about yet another open-source tool.\nYes! But it’s worth noting that a lot of the benefits that Quarto brings have been available to R users for many years, thanks to the amazing work of many great open-source contributors like @xieyihui. Julia was the main reason for me to branch out of this comfortable R bubble as I describe below. That said, if you are a Julia user who really couldn’t care less about my previous experiences with R Markdown, this is a good time to skip straight ahead to Section 2. By the way, if you haven’t clicked on that link, here’s a small showcase demonstrating how it was generated. It shows easy it is to have everything well organised and connected with Quarto."
  },
  {
    "objectID": "posts/julia-and-quarto-a-match-made-in-heaven/index.html#sec-bubble",
    "href": "posts/julia-and-quarto-a-match-made-in-heaven/index.html#sec-bubble",
    "title": "Julia and Quarto: a match made in heaven? 🌤",
    "section": "A comfortable bubble 🎈",
    "text": "A comfortable bubble 🎈\nFor many years I have used R Markdown for essentially anything work-related. As an undergraduate economics student facing the unfortunate reality that people still teach Stata, I was drawn to R. This was partially because R has a great open-source community and also partially because Stata. Once I realised that I would be able to use R Markdown to write up all of my future homework assignments and even my thesis, I never looked back. MS Word was now officially dead to me. Overleaf was nothing more than a last resort if everyone else in my team insisted on using it for a group project. Being able to write my undergraduate dissertation in R Markdown was a first truly triumphant moment. Soon after that I would also try myself at Shiny, produce outputs in HTML and build entire websites through blogdown. And all of that from within R Studio involving R and Markdown and really not much else. During my first professional job at the Bank of England I was reluctant to use anything other than R Markdown to produce all of my output. Luckily for me, the Bank was very much heading in that same direction at the time and my reluctance was not perceived as stubbornness, but actually welcome (at least I hoped so).\n\nCracks in the bubble 🧨\nSoon though, part of me felt a little boxed in. For any work that required me to look outside of the R bubble, I knew I might also have to give up a very, very comfortable work environment and my productivity would surely take a hit. During my master’s in Data Science, for example, the mantra was very much “Python + Jupyter or die”. Through reticulate and R Studio’s growing support for Python I managed to get by without having to leave my bubble too often. But reticulate always felt a little clunky (sorry!) and some professors were reluctant to accept anything other than Jupyter notebooks. Even if others had not perceived it that way in the past, I certainly started to feel that I might just be a little too attached the beautiful bubble that R Studio had created around me.\n\n\nEnter: Julia 💣\nThen there was Julia: elegant, fast, pure, scientific and - oh my REPL! - those beautiful colors and unicode symbols. The stuff of dreams, really! Geeky dreams, but dreams nonetheless. I had once before given Julia a shot when working with high-frequency trade data for a course in market microstructure. This was the first time R really revealed its limitations to me and my bubble nearly burst, but thanks to data.table and Rcpp I managed to escape with only minor bruises. Still, Julia kept popping up, teasing me whenever I would work on some Frakenstein-style C++ code snippets that would hopefully resolve my R bottlenecks. I actually enjoyed mixing some C++ into my R code like I did here, but the process was just a little painful and slow. But wouldn’t learning all of Julia take even more time and patience? And what about my dependence on R Markdown?\n\n\nJulia bursts my bubble 💥\nAs I started my PhD in September 2021, I eventually gave in. New beginnings - time to suck it up! If it meant that I’d have to use Jupyter notebooks with Julia, so be it! And so I was off to a somewhat bumpy start that would have me bouncing back and forth between trying to make Julia work in R Studio (meh), setting up Jupyter Lab (meeeh), just using the Julia REPL because “the REPL is all you need” (nope) and even struggling with Vim and Emacs. Then there was also Pluto.jl, of course, which admittedly looks amazing! But it also looks very much tailored to Julia and (I believe) the number of different output formats you can produce is still very limited. Eventually, I settled for VSCode in combination with Jupyter notebooks. As much as I dreaded the latter, Jupyter is popular, arguably versatile and supports both R and Julia. This setup worked well enough for me, but it still definitely fell short of the breeze that R Studio had always provided. One thing that really bugged me, for example, was the fact that the IJulia kernel was not accessible from the Julia REPL. Each notebook would have its own environment, which could only be accessed through the notebook. In R Studio the interaction between R Markdown and the console is seamless, as both have access to the same environment variables.\n\n\nEnter: Quarto ❤️‍🩹\nAround the same time that I started using Julia, I read about Quarto for the first time. It looked … great! Like a timely little miracle really! But also … unfinished? Definitely experimental at the time. I loved the idea though and in a footnote somewhere on their website it said that the project was supported by R Studio which I took as a very good sign. So I decided to at least give it a quick try and built a small (tiny) website summarising some of the literature I had read for my PhD:\n\n\nJust had my first go #quarto and I absolutely love the concept! Open-source and language agnostic - truly amazing work from &#64rstudio https://t.co/veCg7ywQ8v\n\n— Patrick Altmeyer (&#64paltmey) October 29, 2021\n\n\nThis was a first very pleasant encounter with Quarto, arguable even smoother than building websites in blogdown. As for working with Julia though, I had made up my mind that VSCode was the way to go and at the time there was no Quarto extension (there is now). There was also little in terms of communication about the project by R Studio, probably because things were really still in the early development stages. I was hopeful that eventually Quarto would enable me to emulate the R Studio experience in VS Code, but for now things were not quite there yet.\n\n\nQuarto keeps growing 🤞\nSince I was now working with VSCode + Jupyter and since Quarto supports Jupyter as well as all of my old R Markdown work, my next little Quarto project involved turning my old blogdown-powered blog into a Quarto-powered blog. This was not strictly necessary, as I could always export my new Jupyter notebooks to HTML and let blogdown do the rest. But it did streamline things a little bit and the default Quarto blog theme - you are staring at it - is actually 🔥. I also did not have to feel guilty towards @xieyihui about leaving blogdown, because unsurprisingly he is on the Quarto team. As I was working on this little project I started noticing that the Quarto website was updated regularly and responses to issues I opened like this one were answered very swiftly. Clearly, things were moving and they were moving fast. More recently, the news about Quarto has been spreading and it’s left some folks as confused and amazed as I was, when I first heard about it:\n\n\n#RStats can someone explain to me what's the difference between {Quarto} and {RMarkdown}? I saw a tweet about Quarto and now I'm all confused … What gap is it supposed to fill?\n\n— Erwin Lares (&#64lasrubieras) March 30, 2022\n\n\nThis is why finally I’ve decided I should write a brief post about how and why I use Quarto. Since I have been working mostly with Julia for the past couple of months, I’ve chosen to focus on the interaction between Quarto and Julia. Coincidentally, yesterday was also the first time I saw a guide dedicated to Julia on the Quarto website, so evidently I am not the only one interested in that marriage. This also means that there really is not too much left for me to talk about now, since Quarto’s documentation is state-of-the-art. But a few bits and pieces I mention below might hopefully still be useful or at least some food for thought."
  },
  {
    "objectID": "posts/julia-and-quarto-a-match-made-in-heaven/index.html#sec-match",
    "href": "posts/julia-and-quarto-a-match-made-in-heaven/index.html#sec-match",
    "title": "Julia and Quarto: a match made in heaven? 🌤",
    "section": "Quarto and Julia: a perfect match 💙💜💚",
    "text": "Quarto and Julia: a perfect match 💙💜💚\nWhile what follows may be relevant to other programming languages, my main goal for this last section is to flag Quarto to the Julia community. In any case, #rstats folks have been using R and Python in R Markdown documents for a while now and won’t need much of an introduction to Quarto. As for Python aficionados, I can only recommend to give Quarto a shot (you will still be able to use Jupyter notebooks).\n\nWorking with VSCode, Quarto and Julia\nThe very article you are reading right now was composed in a Quarto document. These documents feel and look very much like standard Julia Markdown documents, but you can do a lot more with them. You can find the source code for this and other documents presented in this blog here.\nTo get you started, here is my current setup combining VSCode, Quarto and Julia:\n\nVSCode extensions: in addition to the Julia extension you will need the Quarto extension. In addition, the YAML extension and some extension to preview Markdown docs would be helpful. I am not sure if Markdown Julia and Jupyter are strictly necessary, but it won’t hurt.\nI do most of my work in Quarto documents .qmd.\nIf you choose to also do that, make sure that the .qmd document has access to a Pkg.jl environment that has IJulia added.\n\nJulia code cells can be added anywhere along with your plain text Markdown. They look like this:\n```{julia}\nusing Pkg\nPkg.add(\"CounterfactualExplanations\")\n```\nContrary to Jupyter notebooks, executing this code cells will start a Julia REPL in VSCode. I find this very helpful, because it lets me fiddle with anything I have created inside the Quarto notebook without having to click into cells all the time. Quarto comes with great support for specifying code executing options. For example, for the code below I have specified #| echo: true in order for the code to be rendered. The code itself is the code I actually used to build the animation above (heavily borrowed from this Javis.jl tutorial).\n\n\nShow the code\nusing Javis, Animations, Colors\n\nsize = 600\nradius_factor = 0.33\n\nfunction ground(args...)\n    background(\"transparent\")\n    sethue(\"white\")\nend\n\nfunction rotate_anim(idx::Number, total::Number) \n    distance_circle = 0.875\n    steps = collect(range(distance_circle,1-distance_circle,length=total))\n    Animation(\n        [0, 1], # must go from 0 to 1\n        [0, steps[idx]*2π],\n        [sineio()],\n    )\nend\n\ntranslate_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(size*radius_factor, 0)],\n    [sineio()],\n)\n\ntranslate_back_anim = Animation(\n    [0, 1], # must go from 0 to 1\n    [O, Point(-(size*radius_factor), 0)],\n    [sineio()],\n)\n\njulia_colours = Dict(\n    :blue => \"#4063D8\",\n    :green => \"#389826\",\n    :purple => \"#9558b2\",\n    :red => \"#CB3C33\"\n)\ncolour_order = [:red, :purple, :green, :blue]\nn_colours = length(julia_colours)\nfunction color_anim(start_colour::String, quarto_col::String=\"#4b95d0\")\n    Animation(\n        [0, 1], # must go from 0 to 1\n        [Lab(color(start_colour)), Lab(color(quarto_col))],\n        [sineio()],\n    )\nend\n\nvideo = Video(size, size)\n\nframe_starts = 1:10:40\nn_total = 250\nn_frames = 150\nBackground(1:n_total, ground)\n\n# Blob:\nfunction element(; radius = 1)\n    circle(O, radius, :fill) # The 4 is to make the circle not so small\nend\n\n# Cross:\nfunction cross(color=\"black\";orientation=:horizontal)\n    sethue(color)\n    setline(10)\n    if orientation==:horizontal\n        out = line(Point(-size,0),Point(size,0), :stroke)\n    else\n        out = line(Point(0,-size),Point(0,size), :stroke)\n    end\n    return out\nend\n\nfor (i, frame_start) in enumerate(1:10:40)\n\n    # Julia circles:\n    blob = Object(frame_start:n_total, (args...;radius=1) -> element(;radius=radius))\n    act!(blob, Action(1:Int(round(n_frames*0.25)), change(:radius, 1 => 75))) # scale up\n    act!(blob, Action(n_frames:(n_frames+50), change(:radius, 75 => 250))) # scale up further\n    act!(blob, Action(1:30, translate_anim, translate()))\n    act!(blob, Action(31:120, rotate_anim(i, n_colours), rotate_around(Point(-(size*radius_factor), 0))))\n    act!(blob, Action(121:150, translate_back_anim, translate()))\n    act!(blob, Action(1:150, color_anim(julia_colours[colour_order[i]]), sethue()))\n\n    # Quarto cross:\n    cross_h = Object((n_frames+50):n_total, (args...) -> cross(;orientation=:horizontal))\n    cross_v = Object((n_frames+50):n_total, (args...) -> cross(;orientation=:vertical))\nend\n\nrender(\n    video;\n    pathname = joinpath(www_path, \"intro.gif\"),\n)\n\n\n\n\nWorking with Documenter.jl and Quarto\nAn interesting application of Quarto in the Julia ecosystem is package documentation. This is of course best done using Documenter.jl and fortunately the two play nicely with each other, since both share a common ground (Markdown). Their interaction is perhaps best demonstrated through this Julia library I recently developed: CounterfactualExplanatinos.jl. On there you will find lot of Julia scripts *.jl under src/ and test/, as well as many Markdown .md and Quarto documents .qmd under docs. I wrote the package documentation in the Quarto documents, rendered documents individually through quarto render [doc].qmd and then fed the resulting Markdown documents to Documenter.jl as always.\nBelow is my standard YAML header for those Quarto documents:\nformat: \n  commonmark:\n    variant: -raw_html\n    wrap: none\n    self-contained: true\ncrossref:\n  fig-prefix: Figure\n  tbl-prefix: Table\nbibliography: https://raw.githubusercontent.com/pat-alt/bib/main/bib.bib\noutput: asis\nexecute: \n  echo: true\n  eval: false\njupyter: julia-1.6\nYou can see that it points to Bibtex file I host on another Github repository. This makes it very easy to generate citations and references for the rendered Markdown documents, that also show up in the docs (e.g. here). Unfortunately, cross-referencing only partially works, because it relies on auto-generated HTML and Documenter.jl expects this to be passed in blocks. Choosing variant: -raw_html is only a workaround as I have discussed here. Ideally, Documenter.jl would just accept HTML documents rendered from Quarto, but currently only Markdown documents are accepted by make_docs. Still, if anything this workaround is a nice gimmick that extends the default Documenter.jl functionality, without any hassle involved. Hopefully, this can be improved in the future.\n\n\nUsing Quarto for JuliaCon Proceedings\nAnother very good use-case for Quarto involves actual scientific publications in journals such as JuliaCon Proceedings. The existing submission process is tailored towards reproducibility and actually involves reviews directly on GitHub, which is fantastic. But currently only submissions in TeX format are accepted, which is not so great. Using Quarto would not only streamline this process further, but also open the JuliaCon Proceedings Journal up to publishing content in different output formats. Quarto docs could be used to still render the traditional PDF. But those same documents could also be used to create interactive versions in HTML. Arguably, the entire journal could probably be built through Quarto."
  },
  {
    "objectID": "posts/julia-and-quarto-a-match-made-in-heaven/index.html#wrapping-up",
    "href": "posts/julia-and-quarto-a-match-made-in-heaven/index.html#wrapping-up",
    "title": "Julia and Quarto: a match made in heaven? 🌤",
    "section": "Wrapping up 🎗",
    "text": "Wrapping up 🎗\nIn this post I wanted to demonstrate that Quarto might just be the next revolution in scientific publishing. In particular, I hope I have managed to demonstrate its appeal to the Julia community, which I am proud to be part of now that I have managed to branch out of my old R bubble. Please let me hear your thoughts and comments below!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Explaining models through counterfactuals\n\n\nThis post introduces a new Julia package for generating counterfactual explanations. The package can be used to explain machine learning algorithms developed and trained in Julia as well as other popular programming languages like Python and R.\n\n\n\n\n\n\nApr 20, 2022\n\n\nPatrick Altmeyer\n\n\n11 min\n\n\n5/10/22, 1:09:50 PM\n\n\n\n\n\n\n  \n\n\n\n\n\nA new way to publish science\n\n\nAn opinionated, practical review celebrating the open-source community. I discuss why Quarto is nothing short of revolutionary and how I’ve been using it with Julia.\n\n\n\n\n\n\nApr 7, 2022\n\n\nPatrick Altmeyer\n\n\n15 min\n\n\n5/10/22, 12:15:24 PM\n\n\n\n\n\n\n  \n\n\n\n\n\nEffortless Bayesian Deep Learning in Julia\n\n\nAn introduction to effortless Bayesian deep learning through Laplace approximation coded from scratch in Julia.\n\n\n\n\n\n\nFeb 18, 2022\n\n\nPatrick Altmeyer\n\n\n11 min\n\n\n5/10/22, 12:16:10 PM\n\n\n\n\n\n\n  \n\n\n\n\n\nFrom scratch in Julia Language\n\n\nAn introduction to Bayesian Logistic Regression from the bottom up with examples in Julia language.\n\n\n\n\n\n\nNov 15, 2021\n\n\nPatrick Altmeyer\n\n\n13 min\n\n\n4/20/22, 2:15:11 PM\n\n\n\n\n\n\n  \n\n\n\n\n\nExplained through a tale of 🐱’s and 🐶’s\n\n\nAn introduction to algorithmic recourse and an implementation of a simplified version of REVISE (Joshi et al., 2019). This post was prepared as part of my PhD application.\n\n\n\n\n\n\nApr 27, 2021\n\n\nPatrick Altmeyer\n\n\n10 min\n\n\n5/10/22, 12:15:34 PM\n\n\n\n\n\n\n  \n\n\n\n\n\n\n\n\nResearch on explainable AI has recently gained considerable momentum. In this post I explore a Bayesian approach to ex-post explainability of Deep Neural Networks.a\n\n\n\n\n\n\nFeb 7, 2021\n\n\nPatrick Altmeyer\n\n\n10 min\n\n\n4/20/22, 2:29:41 PM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA small post on how I (used to!) build this website using blogdown.\n\n\n\n\n\n\nFeb 2, 2021\n\n\nPatrick Altmeyer\n\n\n5 min\n\n\n5/10/22, 12:15:29 PM\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe obligatory welcome post and a shout-out to Yihui Xie and the folks behind quarto.\n\n\n\n\n\n\nFeb 1, 2021\n\n\nPatrick Altmeyer, Patrick Altmeyer\n\n\n0 min\n\n\n2/21/22, 9:28:44 AM\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "dev/juliacon22/quarto.html",
    "href": "dev/juliacon22/quarto.html",
    "title": "blog",
    "section": "",
    "text": "Scientific publications come in many forms: Markdown, HTML, PDF, ePub and more. Wouldn’t it be nice to have a tool that can produce all of these different output formats from the same input? With Quarto scientific publishing always starts from the same place: a plain Markdown document blended with essentially any programming language of your choice and a YAML header defining your output. I would like to demonstrate its potential value for the Julia community."
  },
  {
    "objectID": "dev/juliacon22/quarto.html#description",
    "href": "dev/juliacon22/quarto.html#description",
    "title": "blog",
    "section": "Description",
    "text": "Description\n\nProblem: so many output formats 😫\nDoes your work involve research, writing and publishing? Do you code in Julia and perhaps even other programming languages from time to time? If so, then chances are that you often find yourself bouncing back and forth between different open-source text editors, IDEs and platforms depending on your current needs. Using a diverse set of tools is reasonable, because there typically is no single perfect approach that solves all our problems. But as much as the great variety of free tools deserves being celebrated, all of this bouncing back and forth can be really tiring.\n\n\nSolution: Quarto 🎁\nWhat if there was a single tool, an engine that can turn your hard work into all kinds of different outputs? I mean literally any output you can think of: Markdown, HTML, PDF, LateX, ePub, entire websites, presentations, MS Word, OpenOffice, … the list goes on. All of that starting from the same place: a plain Markdown document blended with essentially any programming language of your choice and a YAML header defining your output format. This tool now exists and it goes by the name Quarto.\n\n\nQuarto and Julia 🤩\nIn this experience talk I would like to provide a brief introduction to Quarto and its interaction with Julia. I would like to talk about my setup, workflow and the interplay between Quarto and Documenter.jl. As an example, I will show how I’ve used Quarto during the development of my new Julia package: CounterfactualExplanations.jl.\nI’d also like to demonstrate how and why Quarto could be leveraged to turn the JuliaCon Proceedings Journal into one of the most innovative journals out there. Taking inspiration from the likes of Distill and the RStudio AI Blog, a digital version of the journal could include interactive elements and versioning, among other things, all while still maintaining the ability to also produce a printable output version.\nQuarto has tremendous potential for making scientific research more accessible, transparent, reproducible, diverse and fast. Combining Quarto with Julia is in my own experience nothing less than a game changer. For more information feel free to also check out my blog post on the topic."
  },
  {
    "objectID": "dev/juliacon22/quarto.html#notes",
    "href": "dev/juliacon22/quarto.html#notes",
    "title": "blog",
    "section": "Notes",
    "text": "Notes\nWhile I have used R and R Markdown for many years and therefore owe the folks behind R Studio a tremendous amount of gratitude, I am in no way affiliated with R Studio or any of the developers behind Quarto. Having worked with Quarto and Julia for a few months now, I have just been very happy about the overall experience and would love to share that with the Julia community. Being able to produce all kinds of different outputs from one place is something that I am sure lots of people would be very interested in hearing about."
  }
]