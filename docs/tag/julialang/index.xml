<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>julialang | Patrick Altmeyer</title>
    <link>https://www.paltmeyer.com/tag/julialang/</link>
      <atom:link href="https://www.paltmeyer.com/tag/julialang/index.xml" rel="self" type="application/rss+xml" />
    <description>julialang</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2021 Patrick Altmeyer</copyright><lastBuildDate>Mon, 15 Nov 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://www.paltmeyer.com/media/icon_huf71aeb422d2dbec20c1fa0f7ef6934b2_32911_512x512_fill_lanczos_center_3.png</url>
      <title>julialang</title>
      <link>https://www.paltmeyer.com/tag/julialang/</link>
    </image>
    
    <item>
      <title>Bayesian Logistic Regression</title>
      <link>https://www.paltmeyer.com/post/bayesian-logistic-regression/</link>
      <pubDate>Mon, 15 Nov 2021 00:00:00 +0000</pubDate>
      <guid>https://www.paltmeyer.com/post/bayesian-logistic-regression/</guid>
      <description>
&lt;script src=&#34;https://www.paltmeyer.com/post/bayesian-logistic-regression/index_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;p&gt;If you’ve ever looked for evaluation metrics to assess model accuracy, chances are that you found many (too many?). Accuracy is in some sense the holy grail of prediction so it’s not at all surprising that the machine learning community spends a lot time thinking about it. In a world where more and more high-stake decisions are being automated, model accuracy is in fact a very valid concern. But does the current recipe for model evaluation seem like a sound approach to automated decision-making? Haven’t we forgot anything?&lt;/p&gt;
&lt;p&gt;Some would argue that we need to pay more attention to model uncertainty. No matter how many times you have cross-validated your model, the loss metric it’s being optimized against as well as its parameters and predictions remain inherently random variables. Focusing merely on prediction accuracy and ignoring uncertainty altogether can install a false level of confidence in automated decision-making systems. Any &lt;strong&gt;trustworthy&lt;/strong&gt; approach to learning from data should therefore at the very least be transparent about its own uncertainty.&lt;/p&gt;
&lt;p&gt;How can we estimate uncertainty around model parameters and predictions? Frequentist methods for uncertainty quantification generally involve either closed-form solutions based on asymptotic theory or bootstrapping (see for example &lt;a href=&#34;https://web.stanford.edu/class/archive/stats/stats200/stats200.1172/Lecture26.pdf&#34;&gt;here&lt;/a&gt; for the case of logistic regression). In Bayesian statistics and machine learning we are instead concerned with modelling the &lt;strong&gt;posterior distribution&lt;/strong&gt; over model parameters. This approach to uncertainty quantification is known as &lt;strong&gt;Bayesian Inference&lt;/strong&gt; because we treat model parameters in a Bayesian way: we make assumptions about their distribution based on &lt;strong&gt;prior&lt;/strong&gt; knowledge or beliefs and update these beliefs in light of new evidence. The frequentist approach avoids the need for being explicit about prior beliefs, which in the past has sometimes been considered as &lt;em&gt;un&lt;/em&gt;scientific. However, frequentist methods come with their own assumptions and pitfalls (see for example &lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#ref-murphy2012machine&#34; role=&#34;doc-biblioref&#34;&gt;Murphy&lt;/a&gt; (&lt;a href=&#34;#ref-murphy2012machine&#34; role=&#34;doc-biblioref&#34;&gt;2012&lt;/a&gt;)&lt;/span&gt;) for a discussion). Without diving further into this argument, let us now see how Bayesian logistic regression can be implemented from the bottom up.&lt;/p&gt;
&lt;div id=&#34;the-ground-truth&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The ground truth&lt;/h2&gt;
&lt;p&gt;In this post we will work with a synthetic toy data set &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{D}\)&lt;/span&gt; composed of &lt;span class=&#34;math inline&#34;&gt;\(N\)&lt;/span&gt; binary labels &lt;span class=&#34;math inline&#34;&gt;\(y_n\in\{0,1\}\)&lt;/span&gt; and corresponding feature vectors &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{x}_n\in \mathbb{R}^D\)&lt;/span&gt;. Working with synthetic data has the benefit that we have control over the &lt;strong&gt;ground truth&lt;/strong&gt; that generates our data. In particular, we will assume that the binary labels &lt;span class=&#34;math inline&#34;&gt;\(y_n\)&lt;/span&gt; are generated by a logistic regression model&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:logreg&#34;&gt;\[
\begin{equation} 
\begin{aligned}
&amp;amp;&amp;amp; p(y_n|\mathbf{x}_n;\mathbf{w})&amp;amp;\sim\text{Ber}(y_n|\sigma(\mathbf{w}^T\mathbf{x}_n)) \\
\end{aligned}
\tag{1}
\end{equation}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;where &lt;span class=&#34;math inline&#34;&gt;\(\sigma(a)=1/(1+e^{-a})\)&lt;/span&gt; is the &lt;strong&gt;sigmoid&lt;/strong&gt; or &lt;strong&gt;logit&lt;/strong&gt; function &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-murphy2022probabilistic&#34; role=&#34;doc-biblioref&#34;&gt;Murphy 2022&lt;/a&gt;)&lt;/span&gt;.&lt;a href=&#34;#fn1&#34; class=&#34;footnote-ref&#34; id=&#34;fnref1&#34;&gt;&lt;sup&gt;1&lt;/sup&gt;&lt;/a&gt; Features were generated from a mixed Gaussian model. To add a little bit of life to our example we will assume that the binary labels classify samples into cats and dogs, based on their height and tail length. Figure &lt;a href=&#34;#fig:ground&#34;&gt;1&lt;/a&gt; shows the synthetic data in the two-dimensional feature domain. Following an introduction to Bayesian Logistic Regression in the next section we will use the synthetic data &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{D}\)&lt;/span&gt; to bechmark our model.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:ground&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://www.paltmeyer.com/post/bayesian-logistic-regression/index_files/figure-html/ground-1.png&#34; alt=&#34;Ground truth labels.&#34; width=&#34;480&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: Ground truth labels.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-maths&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The maths&lt;/h2&gt;
&lt;p&gt;Estimation usually boils down to finding the vector of parameters &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mathbf{w}}\)&lt;/span&gt; that maximizes the likelihood of observing &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{D}\)&lt;/span&gt; under the assumed model. That estimate can then be used to compute predictions for some new unlabelled data set &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{D}=\{x_m:m=1,...,M\}\)&lt;/span&gt;.&lt;/p&gt;
&lt;div id=&#34;problem-setup&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Problem setup&lt;/h3&gt;
&lt;p&gt;The starting point for Bayesian Logistic Regression is &lt;strong&gt;Bayes’ Theorem&lt;/strong&gt;:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:posterior&#34;&gt;\[
\begin{equation} 
\begin{aligned}
&amp;amp;&amp;amp; p(\mathbf{w}|\mathcal{D})&amp;amp;\propto p(\mathcal{D}|\mathbf{w})p(\mathbf{w}) \\
\end{aligned}
\tag{2}
\end{equation}
\]&lt;/span&gt;
Formally, this says that the posterior distribution of parameters &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{w}\)&lt;/span&gt; is proportional to the product of the likelihood of observing &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{D}\)&lt;/span&gt; given &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{w}\)&lt;/span&gt; and the prior density of &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{w}\)&lt;/span&gt;. Applied to our context this can intuitively be understood as follows: our posterior beliefs around &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{w}\)&lt;/span&gt; are formed by both our prior beliefs and the evidence we observe. Yet another way to look at this is that maximising &lt;a href=&#34;#eq:posterior&#34;&gt;(2)&lt;/a&gt; with respect to &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{w}\)&lt;/span&gt; corresponds to maximum likelihood estimation regularized by prior beliefs (we will come back to this).&lt;/p&gt;
&lt;p&gt;Under the assumption that individual label-feature pairs are &lt;strong&gt;independently&lt;/strong&gt; and &lt;strong&gt;identically&lt;/strong&gt; distributed, their joint likelihood is simply the product over their individual densities. The prior beliefs around &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{w}\)&lt;/span&gt; are at our discretion. In practice they may be derived from previous experiments. Here we will use a zero-mean spherical Gaussian prior for reasons explained further below. To sum this up we have&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:prior&#34;&gt;\[
\begin{equation} 
\begin{aligned}
&amp;amp;&amp;amp; p(\mathcal{D}|\mathbf{w})&amp;amp; \sim \prod_{n=1}^N p(y_n|\mathbf{x}_n;\mathbf{w})\\
&amp;amp;&amp;amp; p(\mathbf{w})&amp;amp; \sim \mathcal{N} \left( \mathbf{w} | \mathbf{w}_0, \Sigma_0 \right) \\
\end{aligned}
\tag{3}
\end{equation}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;with &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{w}_0=\mathbf{0}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\Sigma_0=\sigma^2\mathbf{I}\)&lt;/span&gt;. Plugging this into Bayes’ rule we finally have&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34;&gt;\[
\begin{aligned}
&amp;amp;&amp;amp; p(\mathbf{w}|\mathcal{D})&amp;amp;\propto\prod_{n=1}^N \text{Ber}(y_n|\sigma(\mathbf{w}^T\mathbf{x}_n))\mathcal{N} \left( \mathbf{w} | \mathbf{w}_0, \Sigma_0 \right) \\
\end{aligned}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Unlike with linear regression there are no closed-form analytical solutions to estimating or maximising this posterior, but fortunately accurate approximations do exist &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-murphy2022probabilistic&#34; role=&#34;doc-biblioref&#34;&gt;Murphy 2022&lt;/a&gt;)&lt;/span&gt;. One of the simplest approaches called &lt;strong&gt;Laplace Approximation&lt;/strong&gt; is straight-forward to implement and computationally very efficient. It can be shown that under the assumption of a Gaussian prior, the posterior of logistic regression is also approximately Gaussian: in particular, it approximately follows a Gaussian distribution centered around the &lt;strong&gt;maximum a posteriori&lt;/strong&gt; (MAP) estimate &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mathbf{w}}=\arg\max_{\mathbf{w}} p(\mathbf{w}|\mathcal{D})\)&lt;/span&gt; and with a covariance matrix equal to the inverse Hessian evaluated at the mode &lt;span class=&#34;math inline&#34;&gt;\(\hat{\Sigma}=(\mathbf{H}(\hat{\mathbf{w}}))^{-1}\)&lt;/span&gt;. With that in mind, finding &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mathbf{w}}\)&lt;/span&gt; seems like a natural next step.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;solving-the-problem&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Solving the problem&lt;/h3&gt;
&lt;p&gt;In practice we do not maximize the likelihood &lt;span class=&#34;math inline&#34;&gt;\(p(\mathbf{w}|\mathcal{D})\)&lt;/span&gt; directly. Instead we minimize the negative log likelihood, which is equivalent and easier to implement. In &lt;a href=&#34;#eq:likeli&#34;&gt;(4)&lt;/a&gt; below I have denoted the negative log likelihood as &lt;span class=&#34;math inline&#34;&gt;\(\ell(\mathbf{w})\)&lt;/span&gt; indicating that this is the &lt;strong&gt;loss function&lt;/strong&gt; we aim to minimize. The following two lines in &lt;a href=&#34;#eq:likeli&#34;&gt;(4)&lt;/a&gt; show the gradient and Hessian - so the first- and second-order derivatives of &lt;span class=&#34;math inline&#34;&gt;\(\ell\)&lt;/span&gt; with respect to &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{w}\)&lt;/span&gt; - where &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{H}_0=\Sigma_0^{-1}\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(\mu_n=\sigma(\mathbf{w}^T\mathbf{x}_n)\)&lt;/span&gt;. To understand how exactly the gradient and Hessian are derived see for example chapter 10 in &lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#ref-murphy2022probabilistic&#34; role=&#34;doc-biblioref&#34;&gt;Murphy&lt;/a&gt; (&lt;a href=&#34;#ref-murphy2022probabilistic&#34; role=&#34;doc-biblioref&#34;&gt;2022&lt;/a&gt;)&lt;/span&gt;.&lt;a href=&#34;#fn2&#34; class=&#34;footnote-ref&#34; id=&#34;fnref2&#34;&gt;&lt;sup&gt;2&lt;/sup&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:likeli&#34;&gt;\[
\begin{equation} 
\begin{aligned}
&amp;amp;&amp;amp; \ell(\mathbf{w})&amp;amp;=- \sum_{n=1}^{N} [y_n \log \mu_n + (1-y_n)\log (1-\mu_n)] + \frac{1}{2} (\mathbf{w}-\mathbf{w}_0)^T\mathbf{H}_0(\mathbf{w}-\mathbf{w}_0) \\
&amp;amp;&amp;amp; \nabla_{\mathbf{w}}\ell(\mathbf{w})&amp;amp;= \sum_{n=1}^{N} (\mu_n-y_n) \mathbf{x}_n + \mathbf{H}_0(\mathbf{w}-\mathbf{w}_0) \\
&amp;amp;&amp;amp; \nabla^2_{\mathbf{w}}\ell(\mathbf{w})&amp;amp;= \sum_{n=1}^{N} (\mu_n-y_n) \left( \mu_n(1-\mu_n) \mathbf{x}_n \mathbf{x}_n^T \right) + \mathbf{H}_0\\
\end{aligned}
\tag{4}
\end{equation}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&#34;sidenote&#34;&gt;
&lt;p&gt;&lt;strong&gt;SIDENOTE&lt;/strong&gt; 💡&lt;/p&gt;
&lt;p&gt;Note how earlier I mentioned that maximising the posterior likelihood can be seen as regularized maximum likelihood estimation. We can now make that connection explicit: in &lt;a href=&#34;#eq:likeli&#34;&gt;(4)&lt;/a&gt; let us assume that &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{w}_0=\mathbf{0}\)&lt;/span&gt;. Then since &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{H}_0=\lambda\mathbf{I}\)&lt;/span&gt; with &lt;span class=&#34;math inline&#34;&gt;\(1/\sigma^2\)&lt;/span&gt; the second term in the first line is simply &lt;span class=&#34;math inline&#34;&gt;\(\lambda \frac{1}{2} \mathbf{w}^T\mathbf{w}=\lambda \frac{1}{2} ||\mathbf{w}||_2^2\)&lt;/span&gt;. This is equivalent to running logistic regression with an &lt;span class=&#34;math inline&#34;&gt;\(\ell_2\)&lt;/span&gt;-penalty &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-bishop2006pattern&#34; role=&#34;doc-biblioref&#34;&gt;Bishop 2006&lt;/a&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Since minimizing the loss function in &lt;a href=&#34;#eq:likeli&#34;&gt;(4)&lt;/a&gt; is a convex optimization problem we have many efficient algorithms to choose from in order to solve this problem. With the Hessian at hand it seems natural to use a second-order method, because incorporating information about the curvature of the loss function generally leads to faster convergence. Here we will implement Newton’s method in line with the presentation in chapter 8 of &lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#ref-murphy2022probabilistic&#34; role=&#34;doc-biblioref&#34;&gt;Murphy&lt;/a&gt; (&lt;a href=&#34;#ref-murphy2022probabilistic&#34; role=&#34;doc-biblioref&#34;&gt;2022&lt;/a&gt;)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;posterior-predictive&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Posterior predictive&lt;/h3&gt;
&lt;p&gt;Suppose now that we have trained the Bayesian Logistic Regression model as our binary classifier &lt;span class=&#34;math inline&#34;&gt;\(g_N(\mathbf{x})\)&lt;/span&gt; using our training data &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{D}\)&lt;/span&gt;. A new unlabelled sample &lt;span class=&#34;math inline&#34;&gt;\((\mathbf{x}_{N+1},?)\)&lt;/span&gt; arrives. As with any binary classifier we can predict the missing label by simply plugging the new sample into our classifier &lt;span class=&#34;math inline&#34;&gt;\(\hat{y}_{N+1}=g_N(\mathbf{x}_{N+1})=\sigma(\hat{\mathbf{w}}^T\mathbf{x}_{N+1})\)&lt;/span&gt;, where &lt;span class=&#34;math inline&#34;&gt;\(\hat{\mathbf{w}}\)&lt;/span&gt; is the MAP estimate as before. If at training phase we have found &lt;span class=&#34;math inline&#34;&gt;\(g_N(\mathbf{x})\)&lt;/span&gt; to achieve good accuracy, we may expect &lt;span class=&#34;math inline&#34;&gt;\((\mathbf{x}_{N+1},\hat{y}_{N+1})\)&lt;/span&gt; to be a reasonably good approximation of the true and unobserved pair &lt;span class=&#34;math inline&#34;&gt;\((\mathbf{x}_{N+1},y_{N+1})\)&lt;/span&gt;. But since we are still dealing with an expected value of a random variable, we would generally like to have an idea of how noisy this prediction is. Formally, we are interested in the posterior predictive distribution:&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;math display&#34; id=&#34;eq:posterior-pred&#34;&gt;\[
\begin{equation} 
\begin{aligned}
&amp;amp;&amp;amp; p(y=1|\mathbf{x}, \mathcal{D})&amp;amp;= \int \sigma(\mathbf{w}^T \mathbf{x})p(\mathbf{w}|\mathcal{D})d\mathbf{w} \\
\end{aligned}
\tag{5}
\end{equation}
\]&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;div class=&#34;sidenote&#34;&gt;
&lt;p&gt;&lt;strong&gt;SIDENOTE&lt;/strong&gt; 💡&lt;/p&gt;
&lt;p&gt;The approach that ignores uncertainty altogether corresponds to what is referred to as &lt;strong&gt;plugin&lt;/strong&gt; approximation of the posterior predictive. Formally, it imposes &lt;span class=&#34;math inline&#34;&gt;\(p(y=1|\mathbf{x}, \mathcal{D})\approx p(y=1|\mathbf{x}, \hat{\mathbf{w}})\)&lt;/span&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;With the posterior distribution over model parameters &lt;span class=&#34;math inline&#34;&gt;\(p(\mathbf{w}|\mathcal{D})\)&lt;/span&gt; at hand we have the necessary ingredients to estimate the posterior predictive distribution &lt;span class=&#34;math inline&#34;&gt;\(p(y=1|\mathbf{x}, \mathcal{D})\)&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;An obvious, but computationally expensive way to estimate it is through Monte Carlo: draw &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{w}_s\)&lt;/span&gt; from &lt;span class=&#34;math inline&#34;&gt;\(p(\mathbf{w}|\mathcal{D})\)&lt;/span&gt; for &lt;span class=&#34;math inline&#34;&gt;\(s=1:S\)&lt;/span&gt; and compute fitted values &lt;span class=&#34;math inline&#34;&gt;\(\sigma(\mathbf{w_s}^T\mathbf{x})\)&lt;/span&gt; each. Then the posterior predictive distribution corresponds to the average over all fitted values, &lt;span class=&#34;math inline&#34;&gt;\(p(y=1|\mathbf{x}, \mathcal{D})=1/S \sum_{s=1}^{S}\sigma(\mathbf{w_s}^T\mathbf{x})\)&lt;/span&gt;. By the law of large numbers the Monte Carlo estimate is an accurate estimate of the true posterior predictive for large enough &lt;span class=&#34;math inline&#34;&gt;\(S\)&lt;/span&gt;. Of course, “large enough” is somewhat loosely defined here and depending on the problem can mean “very large.” Consequently, the computational costs involved essentially know no upper bound.&lt;/p&gt;
&lt;p&gt;Fortunately, it turns out that we can trade off a little bit of accuracy in return for a convenient analytical solution. In particular, we have that &lt;span class=&#34;math inline&#34;&gt;\(\sigma(a) \approx \Phi(\lambda a)\)&lt;/span&gt; where &lt;span class=&#34;math inline&#34;&gt;\(\Phi(.)\)&lt;/span&gt; is the standard Gaussian cdf and &lt;span class=&#34;math inline&#34;&gt;\(\lambda=\pi/8\)&lt;/span&gt; ensures that the two functions have the same slope at the origin (Figure &lt;a href=&#34;#fig:probit&#34;&gt;2&lt;/a&gt;). Without dwelling further on the details we can use this finding to approximate the integral in &lt;a href=&#34;#eq:posterior-pred&#34;&gt;(5)&lt;/a&gt; as a sigmoid function. This is called &lt;strong&gt;probit approximation&lt;/strong&gt; and implemented below.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:probit&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://www.paltmeyer.com/post/bayesian-logistic-regression/index_files/figure-html/probit-1.png&#34; alt=&#34;Demonstration of the probit approximation.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 2: Demonstration of the probit approximation.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;the-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The code&lt;/h2&gt;
&lt;p&gt;We now have all the necessary ingredients to code Bayesian Logistic Regression up from scratch. While in practice we would usually want to rely on existing packages that have been properly tested, I often find it very educative and rewarding to program algorithms from the bottom up. You will see that Julia’s syntax so closely resembles the mathematical formulas we have seen above, that going from maths to code is incredibly easy. Seeing those formulas and algorithms then actually doing their magic is quite fun! The code chunk below, for example, shows the implementation of the loss function and its derivatives from &lt;a href=&#34;#eq:likeli&#34;&gt;(4)&lt;/a&gt; above. Take a moment to go through the code line-by-line and try to understand how it relates back to the equations in &lt;a href=&#34;#eq:likeli&#34;&gt;(4)&lt;/a&gt;. Isn’t it amazing how closely the code resembles the actual equations?&lt;/p&gt;
&lt;script src=&#34;https://gist.github.com/pat-alt/cc53a11470e4fb736f24bb6de2393f54.js&#34;&gt;&lt;/script&gt;
&lt;p&gt;Aside from the optimization routine this is essentially all there is to coding up Bayesian Logistic Regression from scratch in Julia Language. If you are curious to see the full source code in detail you can check out this &lt;a href=&#34;https://colab.research.google.com/github/pat-alt/pat-alt.github.io/blob/main/content/post/2021-11-15-bayesian-logistic-regression/julia_implementation.ipynb&#34;&gt;interactive notebook&lt;/a&gt;. Now let us finally turn back to our synthetic data and see how Bayesian Logistic Regression can help us understand the uncertainty around our model predictions.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;the-estimates&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;The estimates&lt;/h2&gt;
&lt;p&gt;Figure &lt;a href=&#34;#fig:posterior&#34;&gt;3&lt;/a&gt; below shows the resulting posterior distribution for &lt;span class=&#34;math inline&#34;&gt;\(w_2\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(w_3\)&lt;/span&gt; at varying degrees of prior uncertainty &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;. The constant &lt;span class=&#34;math inline&#34;&gt;\(w_1\)&lt;/span&gt; is held constant at the mode (&lt;span class=&#34;math inline&#34;&gt;\(\hat{w}_1\)&lt;/span&gt;). The red dot indicates the MLE. Note how for the choice of &lt;span class=&#34;math inline&#34;&gt;\(\sigma\rightarrow 0\)&lt;/span&gt; the posterior is equal to the prior. This is intuitive since we have imposed that we have no uncertainty around our prior beliefs and hence no amount of new evidence can move us in any direction. Conversely, for &lt;span class=&#34;math inline&#34;&gt;\(\sigma \rightarrow \infty\)&lt;/span&gt; the posterior distribution corresponds to the MLE posterior centered around the red dot.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:posterior&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;www/posterior.png&#34; alt=&#34;Posterior distribution for $w_2$ and $w_3$ at varying degrees of prior uncertainty $\sigma$.&#34; width=&#34;750&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 3: Posterior distribution for &lt;span class=&#34;math inline&#34;&gt;\(w_2\)&lt;/span&gt; and &lt;span class=&#34;math inline&#34;&gt;\(w_3\)&lt;/span&gt; at varying degrees of prior uncertainty &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;What about the posterior predictive? The story is similar: since for &lt;span class=&#34;math inline&#34;&gt;\(\sigma\rightarrow 0\)&lt;/span&gt; the posterior is completely dominated by the zero-mean prior we have &lt;span class=&#34;math inline&#34;&gt;\(p(y=1|\mathbf{x},\hat{\mathbf{w}})=0.5\)&lt;/span&gt; everywhere (top left panel in Figure &lt;a href=&#34;#fig:predictive&#34;&gt;4&lt;/a&gt;). As we gradually increase uncertainty around our prior the predictive posterior depends more and more on the data &lt;span class=&#34;math inline&#34;&gt;\(\mathcal{D}\)&lt;/span&gt;: uncertainty around predicted labels is high in regions that are not populated by samples &lt;span class=&#34;math inline&#34;&gt;\((y_n, \mathbf{x}_n)\)&lt;/span&gt;. Not surprisingly, this effect is strongest for the MLE (&lt;span class=&#34;math inline&#34;&gt;\(\sigma\rightarrow \infty\)&lt;/span&gt;) and indicative of overfitting.&lt;/p&gt;
&lt;div class=&#34;figure&#34; style=&#34;text-align: center&#34;&gt;&lt;span style=&#34;display:block;&#34; id=&#34;fig:predictive&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;www/predictive.png&#34; alt=&#34;Predictive posterior distribution at varying degrees of prior uncertainty $\sigma$.&#34; width=&#34;750&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 4: Predictive posterior distribution at varying degrees of prior uncertainty &lt;span class=&#34;math inline&#34;&gt;\(\sigma\)&lt;/span&gt;.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;wrapping-up&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;In this post we have seen how Bayesian Logistic Regression can be implemented from scratch in Julia language. The estimated posterior distribution over model parameters can be used to quantify uncertainty around coefficients and model predictions. I have argued that it is important to be transparent about model uncertainty to avoid being overly confident in estimates. There are many more benefits associated with Bayesian (probabilistic) machine learning. Understanding where in the input domain our model exerts high uncertainty can for example be instrumental in labelling data: see for example &lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#ref-gal2017deep&#34; role=&#34;doc-biblioref&#34;&gt;Gal, Islam, and Ghahramani&lt;/a&gt; (&lt;a href=&#34;#ref-gal2017deep&#34; role=&#34;doc-biblioref&#34;&gt;2017&lt;/a&gt;)&lt;/span&gt; and follow-up works for an interesting application to &lt;strong&gt;active learning&lt;/strong&gt; for image labels. Similarly, there is a recent work that uses estimates of the posterior predictive in the context of &lt;strong&gt;algorithmic recourse&lt;/strong&gt; &lt;span class=&#34;citation&#34;&gt;(&lt;a href=&#34;#ref-schut2021generating&#34; role=&#34;doc-biblioref&#34;&gt;Schut et al. 2021&lt;/a&gt;)&lt;/span&gt;. For a brief introduction to algorithmic recourse see one of my &lt;a href=&#34;../2021-04-26-individual-recourse-for-black-box-models/index.html&#34;&gt;previous posts&lt;/a&gt;. As a great reference for further reading about probabilistic machine learning I can highly recommend &lt;span class=&#34;citation&#34;&gt;&lt;a href=&#34;#ref-murphy2022probabilistic&#34; role=&#34;doc-biblioref&#34;&gt;Murphy&lt;/a&gt; (&lt;a href=&#34;#ref-murphy2022probabilistic&#34; role=&#34;doc-biblioref&#34;&gt;2022&lt;/a&gt;)&lt;/span&gt;. An electronic version of the book is currently freely available as a draft.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;references&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;References&lt;/h2&gt;
&lt;div id=&#34;refs&#34; class=&#34;references csl-bib-body hanging-indent&#34;&gt;
&lt;div id=&#34;ref-bishop2006pattern&#34; class=&#34;csl-entry&#34;&gt;
Bishop, Christopher M. 2006. &lt;em&gt;Pattern Recognition and Machine Learning&lt;/em&gt;. springer.
&lt;/div&gt;
&lt;div id=&#34;ref-gal2017deep&#34; class=&#34;csl-entry&#34;&gt;
Gal, Yarin, Riashat Islam, and Zoubin Ghahramani. 2017. &lt;span&gt;“Deep Bayesian Active Learning with Image Data.”&lt;/span&gt; In &lt;em&gt;International Conference on Machine Learning&lt;/em&gt;, 1183–92. PMLR.
&lt;/div&gt;
&lt;div id=&#34;ref-murphy2012machine&#34; class=&#34;csl-entry&#34;&gt;
Murphy, Kevin P. 2012. &lt;em&gt;Machine Learning: A Probabilistic Perspective&lt;/em&gt;. MIT press.
&lt;/div&gt;
&lt;div id=&#34;ref-murphy2022probabilistic&#34; class=&#34;csl-entry&#34;&gt;
———. 2022. &lt;em&gt;Probabilistic Machine Learning: An Introduction&lt;/em&gt;. MIT Press.
&lt;/div&gt;
&lt;div id=&#34;ref-schut2021generating&#34; class=&#34;csl-entry&#34;&gt;
Schut, Lisa, Oscar Key, Rory Mc Grath, Luca Costabello, Bogdan Sacaleanu, Yarin Gal, et al. 2021. &lt;span&gt;“Generating Interpretable Counterfactual Explanations by Implicit Minimisation of Epistemic and Aleatoric Uncertainties.”&lt;/span&gt; In &lt;em&gt;International Conference on Artificial Intelligence and Statistics&lt;/em&gt;, 1756–64. PMLR.
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#34;footnotes&#34;&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id=&#34;fn1&#34;&gt;&lt;p&gt;We let &lt;span class=&#34;math inline&#34;&gt;\(\mathbf{w}=(10, 0.75, -2.5)^T\)&lt;/span&gt; define the true coefficients.&lt;a href=&#34;#fnref1&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li id=&#34;fn2&#34;&gt;&lt;p&gt;Note that the author works with the negative log likelihood scaled by the sample size&lt;a href=&#34;#fnref2&#34; class=&#34;footnote-back&#34;&gt;↩︎&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
